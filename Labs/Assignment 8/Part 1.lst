Microsoft (R) Macro Assembler Version 6.15.8803		    11/10/22 18:11:48
C:\Users\jclar\MEGA\School\CS2290\Labs\Assignment 8\Part 1.asm  Page 1 - 1


				; Author: Jeremey Larter
				; Lab Assignment #8 Part 1 (The Game Version 4)
				; Purpose: Revamps the demo game from the previous part.
				; NOTE: Use an 80x25 (WxH) console window for the best result.
				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc		; (4/6/03)
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

				; Memory locations.
 00000000 50 69 63 6B 20	prompt			BYTE	"Pick your player skill level:", 0
	   79 6F 75 72 20
	   70 6C 61 79 65
	   72 20 73 6B 69
	   6C 6C 20 6C 65
	   76 65 6C 3A 00
 0000001E 4E 6F 76 69 63	novice			BYTE	"Novice", 0
	   65 00
 00000025 49 6E 74 65 72	intermediate	BYTE	"Intermediate", 0
	   6D 65 64 69 61
	   74 65 00
 00000032 41 64 76 61 6E	advanced		BYTE	"Advanced", 0
	   63 65 64 00
 0000003B 45 78 70 65 72	expert			BYTE	"Expert", 0
	   74 00
 00000042 49 6E 73 61 6E	insane			BYTE	"Insane", 0
	   65 00
 00000049 02			arrowLocation	BYTE	2
 0000004A 00			columnBegin		BYTE	0 ; DL
 0000004B 4F			columnEnd		BYTE	79 ; DL
 0000004C 59 6F 75 20 68	endMessageB		BYTE	"You hit the boundary!", 0Ah, 0Dh, "Game Over!", 0Ah, 0Dh, 0
	   69 74 20 74 68
	   65 20 62 6F 75
	   6E 64 61 72 79
	   21 0A 0D 47 61
	   6D 65 20 4F 76
	   65 72 21 0A 0D
	   00
 00000070 59 6F 75 20 72	endMessageP		BYTE	"You ran out of points!", 0Ah, 0Dh, "Game Over!", 0Ah, 0Dh, 0
	   61 6E 20 6F 75
	   74 20 6F 66 20
	   70 6F 69 6E 74
	   73 21 0A 0D 47
	   61 6D 65 20 4F
	   76 65 72 21 0A
	   0D 00
 00000095 59 6F 75 20 66	endMessageE		BYTE	"You forfeited!", 0Ah, 0Dh, "Game Over!", 0Ah, 0Dh, 0
	   6F 72 66 65 69
	   74 65 64 21 0A
	   0D 47 61 6D 65
	   20 4F 76 65 72
	   21 0A 0D 00
 000000B2 27			position		BYTE	39 ; Used for keeping track of column. Initial value is starting location.
 000000B3 53 63 6F 72 65	score			BYTE	"Score: ", 0
	   3A 20 00
 000000BB 50 6F 69 6E 74	pointBank		BYTE	"Point Bank: ", 0
	   20 42 61 6E 6B
	   3A 20 00
 000000C8 20 20 20 20 20	blank			BYTE	"        ", 0
	   20 20 20 00
 000000D1 00000046		speed			DWORD	70 ; Change delay between movements in milliseconds.
 000000D5 00000032		points			DWORD	50
 000000D9 00000000		bounces			DWORD	0

				; Macro.
 = 0000000B			ROW = 11 ; DH

 00000000			.code

				; Main procedure. Handles menu and game over.
 00000000			main PROC
 00000000  E8 00000000 E	call Clrscr
 00000005  BA 00000000 R	mov EDX, OFFSET prompt
 0000000A  E8 00000000 E	call WriteString
 0000000F			menu:
 0000000F  8A 35 00000049 R		mov DH, arrowLocation
 00000015  B2 00			mov DL, 0
 00000017  E8 00000000 E		call Gotoxy
 0000001C  B0 3E			mov AL, 62 ; ASCII code of right arrow.
 0000001E  E8 00000000 E		call WriteChar
 00000023  B6 02			mov DH, 2
 00000025  B2 04			mov DL, 4
 00000027  E8 00000000 E		call Gotoxy
 0000002C  BA 0000001E R		mov EDX, OFFSET novice
 00000031  E8 00000000 E		call WriteString
 00000036  B6 03			mov DH, 3
 00000038  B2 04			mov DL, 4
 0000003A  E8 00000000 E		call Gotoxy
 0000003F  BA 00000025 R		mov EDX, OFFSET intermediate
 00000044  E8 00000000 E		call WriteString
 00000049  B6 04			mov DH, 4
 0000004B  B2 04			mov DL, 4
 0000004D  E8 00000000 E		call Gotoxy
 00000052  BA 00000032 R		mov EDX, OFFSET advanced
 00000057  E8 00000000 E		call WriteString
 0000005C  B6 05			mov DH, 5
 0000005E  B2 04			mov DL, 4
 00000060  E8 00000000 E		call Gotoxy
 00000065  BA 0000003B R		mov EDX, OFFSET expert
 0000006A  E8 00000000 E		call WriteString
 0000006F  B6 06			mov DH, 6
 00000071  B2 04			mov DL, 4
 00000073  E8 00000000 E		call Gotoxy
 00000078  BA 00000042 R		mov EDX, OFFSET insane
 0000007D  E8 00000000 E		call WriteString
 00000082				cursor:
 00000082  8A 35 00000049 R			mov DH, arrowLocation
 00000088  B2 00				mov DL, 0
 0000008A  E8 00000000 E			call Gotoxy
 0000008F  B8 00000032				mov EAX, 50
 00000094  E8 00000000 E			call Delay
 00000099  66| 52				push DX
 0000009B  E8 00000000 E			call ReadKey
 000000A0  80 FC 50				cmp AH, 50h ; Virtual-scan code for DOWN key.
 000000A3  0F 84 000000CE			je down
 000000A9  80 FC 48				cmp AH, 48h ; Virtual-scan code for UP key.
 000000AC  0F 84 000000E5			je up
 000000B2  80 FC 1C				cmp AH, 1Ch ; Virtual-scan code for ENTER key.
 000000B5  0F 84 000000FC			je setSpeed
 000000BB  EB C5				jmp cursor
 000000BD			gameOverB:: ; Global label.
 000000BD  E8 00000000 E		call Clrscr
 000000C2  BA 000000B3 R		mov EDX, OFFSET score
 000000C7  E8 00000000 E		call WriteString
 000000CC  A1 000000D9 R		mov EAX, bounces
 000000D1  E8 00000000 E		call WriteDec
 000000D6  E8 00000000 E		call Crlf
 000000DB  BA 0000004C R		mov EDX, OFFSET endMessageB
 000000E0  E8 00000000 E		call WriteString
 000000E5  E8 00000000 E		call Crlf
 000000EA  E8 00000000 E		call WaitMsg
 000000EF  E8 00000000 E		call Clrscr
					exit
 000000FB			gameOverP::
 000000FB  E8 00000000 E		call Clrscr
 00000100  BA 000000B3 R		mov EDX, OFFSET score
 00000105  E8 00000000 E		call WriteString
 0000010A  A1 000000D9 R		mov EAX, bounces
 0000010F  E8 00000000 E		call WriteDec
 00000114  E8 00000000 E		call Crlf
 00000119  BA 00000070 R		mov EDX, OFFSET endMessageP
 0000011E  E8 00000000 E		call WriteString
 00000123  E8 00000000 E		call Crlf
 00000128  E8 00000000 E		call WaitMsg
 0000012D  E8 00000000 E		call Clrscr
					exit 
 00000139			gameOverE::
 00000139  E8 00000000 E		call Clrscr
 0000013E  BA 000000B3 R		mov EDX, OFFSET score
 00000143  E8 00000000 E		call WriteString
 00000148  A1 000000D9 R		mov EAX, bounces
 0000014D  E8 00000000 E		call WriteDec
 00000152  E8 00000000 E		call Crlf
 00000157  BA 00000095 R		mov EDX, OFFSET endMessageE
 0000015C  E8 00000000 E		call WriteString
 00000161  E8 00000000 E		call Crlf
 00000166  E8 00000000 E		call WaitMsg
 0000016B  E8 00000000 E		call Clrscr
					exit
 00000177			main ENDP

				; Controls where the arrow goes when the user goes down the menu.
 00000177			down PROC
 00000177  66| 5A		pop DX
 00000179  80 FE 06		cmp DH, 6
 0000017C  75 0C		jne setArrowD
 0000017E  C6 05 00000049 R	mov arrowLocation, 2
	   02
 00000185  E9 FFFFFE76		jmp main
 0000018A			down ENDP

				; Moves arrow location down as user goes down the menu.
 0000018A			setArrowD PROC
 0000018A  FE C6		inc DH
 0000018C  88 35 00000049 R	mov arrowLocation, DH
 00000192  E9 FFFFFE69		jmp main
 00000197			setArrowD ENDP

				; Controls where the arrow goes when the user goes up the menu.
 00000197			up PROC
 00000197  66| 5A		pop DX
 00000199  80 FE 02		cmp DH, 2
 0000019C  75 0C		jne setArrowU
 0000019E  C6 05 00000049 R	mov arrowLocation, 6
	   06
 000001A5  E9 FFFFFE56		jmp main
 000001AA			up ENDP

				; Moves arrow location up as the user goes up the menu.
 000001AA			setArrowU PROC
 000001AA  FE CE		dec DH
 000001AC  88 35 00000049 R	mov arrowLocation, DH
 000001B2  E9 FFFFFE49		jmp main
 000001B7			setArrowU ENDP

				; Changes the speed at which the smiley face moves. Speed corresponds to difficulty level.
 000001B7			setSpeed PROC
 000001B7  E8 00000000 E	call Clrscr
 000001BC  66| 5A		pop DX
 000001BE  80 FE 02		cmp DH, 2
 000001C1  74 37		je setDirection
 000001C3  C7 05 000000D1 R	mov speed, 50
	   00000032
 000001CD  80 FE 03		cmp DH, 3
 000001D0  74 28		je setDirection
 000001D2  C7 05 000000D1 R	mov speed, 40
	   00000028
 000001DC  80 FE 04		cmp DH, 4
 000001DF  74 19		je setDirection
 000001E1  C7 05 000000D1 R	mov speed, 30
	   0000001E
 000001EB  80 FE 05		cmp DH, 5
 000001EE  74 0A		je setDirection
 000001F0  C7 05 000000D1 R	mov speed, 20
	   00000014
 000001FA			setSpeed ENDP

				; The initial direction the smiley face moves is chosen at random.
 000001FA			setDirection PROC
 000001FA  B8 00000002		mov EAX, 2
 000001FF  E8 00000000 E	call Randomize
 00000204  E8 00000000 E	call RandomRange
 00000209  83 F8 01		cmp EAX, 1
 0000020C  0F 84 000000A8	je moveLeft
 00000212			setDirection ENDP

				; Moves a smiley face right across the screen.
 00000212			moveRight PROC
 00000212  83 3D 000000D5 R	cmp points, 0
	   00
 00000219  0F 8E FFFFFEDC	jle gameOverP
 0000021F  E8 00000161		call showScore
 00000224  E8 00000192		call showBank
 00000229			Right:
 00000229  E8 000001CC			call leftBarrier
 0000022E  E8 000001B2			call rightBarrier
 00000233  8A 15 000000B2 R		mov DL, position ; DL is set to position for seamless transition.
 00000239  B6 0B			mov DH, ROW ; So that the smiley face is in the middle heightwise.
 0000023B  E8 00000000 E		call Gotoxy
 00000240  8A 1D 0000004B R		mov BL, columnEnd
 00000246  2A DA			sub BL, DL
 00000248  E8 00000117			call safe
 0000024D  80 FB 10			cmp BL, 16
 00000250  77 0F			ja continue
 00000252  E8 00000118			call warning
 00000257  80 FB 08			cmp BL, 8
 0000025A  77 05			ja continue
 0000025C  E8 00000119			call danger
 00000261				continue:
 00000261  B0 01				mov AL, 1 ; The ASCII character of the smiley face.
 00000263  E8 00000000 E			call WriteChar
 00000268  A1 000000D1 R			mov EAX, speed ; Delay in milliseconds.
 0000026D  E8 00000000 E			call Delay
 00000272  E8 00000000 E			call Gotoxy ; Go back one.
 00000277  B0 20				mov AL, 32 ; The ASCII character of space.
 00000279  E8 00000000 E			call WriteChar
 0000027E  E8 000000E1				call safe
 00000283  FE C2				inc DL
 00000285  88 15 000000B2 R			mov position, DL ; Saves DL to position as ReadKey overwrites the DX register.
 0000028B  3A 15 0000004B R			cmp DL, columnEnd ; Column barrier initially is 79 (for an 80x25 screen). Decreases over time.
 00000291  0F 84 FFFFFE26			je gameOverB
 00000297  E8 00000000 E			call ReadKey ; Checks for key presses without an interrupt.
 0000029C  3C 20				cmp AL, ' '
 0000029E  0F 84 000001C5			je pauseRight
 000002A4  80 FC 26				cmp AH, 26h ; Virtual-scan code for l and L.
 000002A7  0F 84 00000162			je setRight
 000002AD  3C 1B				cmp AL, 1Bh ; Virtual-scan code for ESC key.
 000002AF  0F 84 FFFFFE84			je gameOverE
 000002B5  E9 FFFFFF6F				jmp Right
 000002BA			moveRight ENDP

				; Moves the smiley face left across the screen.
 000002BA			moveLeft PROC
 000002BA  83 3D 000000D5 R	cmp points, 0
	   00
 000002C1  0F 8E FFFFFE34	jle gameOverP
 000002C7  E8 000000B9		call showScore
 000002CC  E8 000000EA		call showBank
 000002D1			Left:
 000002D1  E8 00000124			call leftBarrier
 000002D6  E8 0000010A			call rightBarrier
 000002DB  8A 15 000000B2 R		mov DL, position
 000002E1  B6 0B			mov DH, ROW
 000002E3  E8 00000000 E		call Gotoxy
 000002E8  8A 1D 0000004A R		mov BL, columnBegin
 000002EE  8A FA			mov BH, DL
 000002F0  2A FB			sub BH, BL
 000002F2  E8 0000006D			call safe
 000002F7  80 FF 0F			cmp BH, 15
 000002FA  77 0F			ja continue
 000002FC  E8 0000006E			call warning
 00000301  80 FF 07			cmp BH, 7
 00000304  77 05			ja continue
 00000306  E8 0000006F			call danger
 0000030B				continue:
 0000030B  B0 01				mov AL, 1
 0000030D  E8 00000000 E			call WriteChar
 00000312  A1 000000D1 R			mov EAX, speed
 00000317  E8 00000000 E			call Delay
 0000031C  E8 00000000 E			call Gotoxy
 00000321  FE CA				dec DL
 00000323  B0 20				mov AL, 32
 00000325  E8 00000000 E			call WriteChar
 0000032A  E8 00000035				call safe
 0000032F  88 15 000000B2 R			mov position, DL
 00000335  3A 15 0000004A R			cmp DL, columnBegin
 0000033B  0F 84 FFFFFD7C			je gameOverB
 00000341  E8 00000000 E			call ReadKey
 00000346  3C 20				cmp AL, ' '
 00000348  0F 84 00000129			je pauseLeft
 0000034E  80 FC 1E				cmp AH, 1Eh ; Virtual-scan code for a and A.
 00000351  0F 84 000000E4			je setLeft
 00000357  3C 1B				cmp AL, 1Bh
 00000359  0F 84 FFFFFDDA			je gameOverE
 0000035F  E9 FFFFFF6D				jmp Left
 00000364			moveLeft ENDP

 00000364			safe PROC
 00000364  B8 0000000F		mov EAX, white+(black*16)
 00000369  E8 00000000 E	call SetTextColor
 0000036E  C3			ret
 0000036F			safe ENDP

 0000036F			warning PROC
 0000036F  B8 0000000E		mov EAX, yellow+(black*16)
 00000374  E8 00000000 E	call SetTextColor
 00000379  C3			ret
 0000037A			warning ENDP

 0000037A			danger PROC
 0000037A  B8 00000004		mov EAX, red+(black*16)
 0000037F  E8 00000000 E	call SetTextColor
 00000384  C3			ret
 00000385			danger ENDP

				; Shows the user's current score.
 00000385			showScore PROC
 00000385  66| BA 0000		mov DX, 0
 00000389  E8 00000000 E	call Gotoxy
 0000038E  BA 000000B3 R	mov EDX, OFFSET score
 00000393  E8 00000000 E	call WriteString
 00000398  A1 000000D9 R	mov EAX, bounces
 0000039D  E8 00000000 E	call WriteDec
 000003A2  E8 00000000 E	call Crlf
 000003A7  C3			ret
 000003A8			showScore ENDP

				; Increses the score with every direction switch. Direction is determined with the AL register.
 000003A8			increaseScore PROC
 000003A8  FF 05 000000D9 R	inc bounces
 000003AE  3C 01		cmp AL, 1
 000003B0  0F 85 FFFFFE5C	jne moveRight
 000003B6  E9 FFFFFEFF		jmp moveLeft
 000003BB			increaseScore ENDP

 000003BB			showBank PROC
 000003BB  66| BA 0000		mov DX, 0
 000003BF  FE C6		inc DH
 000003C1  E8 00000000 E	call Gotoxy
 000003C6  BA 000000BB R	mov EDX, OFFSET pointBank
 000003CB  E8 00000000 E	call WriteString
 000003D0  A1 000000D5 R	mov EAX, points
 000003D5  E8 00000000 E	call WriteDec
 000003DA  BA 000000C8 R	mov EDX, OFFSET blank
 000003DF  E8 00000000 E	call WriteString
 000003E4  C3			ret
 000003E5			showBank ENDP

				; Shows the right barrier.
 000003E5			rightBarrier PROC
 000003E5  8A 15 0000004B R	mov DL, columnEnd
 000003EB  B6 0B		mov DH, ROW
 000003ED  E8 00000000 E	call Gotoxy
 000003F2  B0 DD		mov AL, 221
 000003F4  E8 00000000 E	call WriteChar
 000003F9  C3			ret
 000003FA			rightBarrier ENDP

				; Shows the left barrier.
 000003FA			leftBarrier PROC
 000003FA  8A 15 0000004A R	mov DL, columnBegin
 00000400  B6 0B		mov DH, ROW
 00000402  E8 00000000 E	call Gotoxy
 00000407  B0 DE		mov AL, 222  
 00000409  E8 00000000 E	call WriteChar
 0000040E  C3			ret
 0000040F			leftBarrier ENDP

				; Changes the right boundary based on where the smiley face is bounced.
 0000040F			setRight PROC
 0000040F  8A 35 0000004B R	mov DH, columnEnd
 00000415  FE CE		dec DH
 00000417  8A 15 000000B2 R	mov DL, position
 0000041D  B0 01		mov AL, 1 ; AL is used in increaseScore to know which direction the smiley face moves.
 0000041F  38 F2		cmp DL, DH
 00000421  74 85		je increaseScore
 00000423  88 15 0000004B R	mov columnEnd, DL
 00000429  FE C6		inc DH
 0000042B  2A F2		sub DH, DL
 0000042D  0F B6 D6		movzx EDX, DH
 00000430  29 15 000000D5 R	sub points, EDX
 00000436  E9 FFFFFF6D		jmp increaseScore
 0000043B			setRight ENDP

				; Changes the left boundary based on where the smiley face is bounced.
 0000043B			setLeft PROC
 0000043B  8A 35 0000004A R	mov DH, columnBegin
 00000441  FE C6		inc DH
 00000443  8A 15 000000B2 R	mov DL, position
 00000449  38 F2		cmp DL, DH
 0000044B  0F 84 FFFFFF57	je increaseScore
 00000451  88 15 0000004A R	mov columnBegin, DL
 00000457  FE CE		dec DH
 00000459  2A D6		sub DL, DH
 0000045B  0F B6 D2		movzx EDX, DL
 0000045E  29 15 000000D5 R	sub points, EDX
 00000464  E9 FFFFFF3F		jmp increaseScore
 00000469			setLeft ENDP

				; Pause for the smiley face moving right. Also fixes the smiley face disappearing.
 00000469			pauseRight PROC
 00000469  B0 01		mov AL, 1
 0000046B  E8 00000000 E	call WriteChar
 00000470  B9 00000000		mov ECX, 0
 00000475  EB 19		jmp space
 00000477			pauseRight ENDP

				; Pause for the smiley face moving left. Same fix as above for the smiley face.
 00000477			pauseLeft PROC
 00000477  8A 15 000000B2 R	mov DL, position
 0000047D  B6 0B		mov DH, ROW
 0000047F  E8 00000000 E	call Gotoxy
 00000484  B0 01		mov AL, 1
 00000486  E8 00000000 E	call WriteChar
 0000048B  B9 00000001		mov ECX, 1
 00000490			pauseLeft ENDP

				; Infinite loop for the pause.
 00000490			space PROC
 00000490  E8 00000000 E	call ReadKey
 00000495  3C 20		cmp AL, ' '
 00000497  75 F7		jne space
 00000499			space ENDP

				; Unpause and continue moving the smiley face in the last direction.
 00000499			return PROC
 00000499  83 F9 00		cmp ECX, 0
 0000049C  0F 84 FFFFFD70	je moveRight
 000004A2  0F 85 FFFFFE12	jne moveLeft
 000004A8			return ENDP

				END main
Microsoft (R) Macro Assembler Version 6.15.8803		    11/10/22 18:11:48
C:\Users\jclar\MEGA\School\CS2290\Labs\Assignment 8\Part 1.asm  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
INPUT_RECORD . . . . . . . . . .	 00000014
  eventType  . . . . . . . . . .	 00000000	 Word
  event  . . . . . . . . . . . .	 00000004	  00000010
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000DD DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004A8 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandtail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
danger . . . . . . . . . . . . .	P Near	 0000037A _TEXT	Length= 0000000B Public STDCALL
down . . . . . . . . . . . . . .	P Near	 00000177 _TEXT	Length= 00000013 Public STDCALL
increaseScore  . . . . . . . . .	P Near	 000003A8 _TEXT	Length= 00000013 Public STDCALL
leftBarrier  . . . . . . . . . .	P Near	 000003FA _TEXT	Length= 00000015 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000177 Public STDCALL
  menu . . . . . . . . . . . . .	L Near	 0000000F _TEXT	
  cursor . . . . . . . . . . . .	L Near	 00000082 _TEXT	
moveLeft . . . . . . . . . . . .	P Near	 000002BA _TEXT	Length= 000000AA Public STDCALL
  Left . . . . . . . . . . . . .	L Near	 000002D1 _TEXT	
  continue . . . . . . . . . . .	L Near	 0000030B _TEXT	
moveRight  . . . . . . . . . . .	P Near	 00000212 _TEXT	Length= 000000A8 Public STDCALL
  Right  . . . . . . . . . . . .	L Near	 00000229 _TEXT	
  continue . . . . . . . . . . .	L Near	 00000261 _TEXT	
pauseLeft  . . . . . . . . . . .	P Near	 00000477 _TEXT	Length= 00000019 Public STDCALL
pauseRight . . . . . . . . . . .	P Near	 00000469 _TEXT	Length= 0000000E Public STDCALL
return . . . . . . . . . . . . .	P Near	 00000499 _TEXT	Length= 0000000F Public STDCALL
rightBarrier . . . . . . . . . .	P Near	 000003E5 _TEXT	Length= 00000015 Public STDCALL
safe . . . . . . . . . . . . . .	P Near	 00000364 _TEXT	Length= 0000000B Public STDCALL
setArrowD  . . . . . . . . . . .	P Near	 0000018A _TEXT	Length= 0000000D Public STDCALL
setArrowU  . . . . . . . . . . .	P Near	 000001AA _TEXT	Length= 0000000D Public STDCALL
setDirection . . . . . . . . . .	P Near	 000001FA _TEXT	Length= 00000018 Public STDCALL
setLeft  . . . . . . . . . . . .	P Near	 0000043B _TEXT	Length= 0000002E Public STDCALL
setRight . . . . . . . . . . . .	P Near	 0000040F _TEXT	Length= 0000002C Public STDCALL
setSpeed . . . . . . . . . . . .	P Near	 000001B7 _TEXT	Length= 00000043 Public STDCALL
showBank . . . . . . . . . . . .	P Near	 000003BB _TEXT	Length= 0000002A Public STDCALL
showScore  . . . . . . . . . . .	P Near	 00000385 _TEXT	Length= 00000023 Public STDCALL
space  . . . . . . . . . . . . .	P Near	 00000490 _TEXT	Length= 00000009 Public STDCALL
up . . . . . . . . . . . . . . .	P Near	 00000197 _TEXT	Length= 00000013 Public STDCALL
warning  . . . . . . . . . . . .	P Near	 0000036F _TEXT	Length= 0000000B Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LIGHT_BLUE . . . . . . . . . . .	Number	 00000009h   
LIGHT_CYAN . . . . . . . . . . .	Number	 0000000Bh   
LIGHT_GRAY . . . . . . . . . . .	Number	 00000007h   
LIGHT_GREEN  . . . . . . . . . .	Number	 0000000Ah   
LIGHT_MAGENTA  . . . . . . . . .	Number	 0000000Dh   
LIGHT_RED  . . . . . . . . . . .	Number	 0000000Ch   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ROW  . . . . . . . . . . . . . .	Number	 0000000Bh   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
advanced . . . . . . . . . . . .	Byte	 00000032 _DATA	
arrowLocation  . . . . . . . . .	Byte	 00000049 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blank  . . . . . . . . . . . . .	Byte	 000000C8 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
bounces  . . . . . . . . . . . .	DWord	 000000D9 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
columnBegin  . . . . . . . . . .	Byte	 0000004A _DATA	
columnEnd  . . . . . . . . . . .	Byte	 0000004B _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
endMessageB  . . . . . . . . . .	Byte	 0000004C _DATA	
endMessageE  . . . . . . . . . .	Byte	 00000095 _DATA	
endMessageP  . . . . . . . . . .	Byte	 00000070 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
expert . . . . . . . . . . . . .	Byte	 0000003B _DATA	
gameOverB  . . . . . . . . . . .	L Near	 000000BD _TEXT	
gameOverE  . . . . . . . . . . .	L Near	 00000139 _TEXT	
gameOverP  . . . . . . . . . . .	L Near	 000000FB _TEXT	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
insane . . . . . . . . . . . . .	Byte	 00000042 _DATA	
intermediate . . . . . . . . . .	Byte	 00000025 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
novice . . . . . . . . . . . . .	Byte	 0000001E _DATA	
pointBank  . . . . . . . . . . .	Byte	 000000BB _DATA	
points . . . . . . . . . . . . .	DWord	 000000D5 _DATA	
position . . . . . . . . . . . .	Byte	 000000B2 _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
score  . . . . . . . . . . . . .	Byte	 000000B3 _DATA	
speed  . . . . . . . . . . . . .	DWord	 000000D1 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
