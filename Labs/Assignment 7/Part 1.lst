Microsoft (R) Macro Assembler Version 6.15.8803		    11/07/22 14:41:43
C:\Users\jclar\MEGA\School\CS2290\Labs\Assignment 7\Part 1.asm  Page 1 - 1


				; Author: Jeremey Larter
				; Lab Assignment #7 Part 1 (The Game Version 2)
				; Purpose: Revamps the demo game from the previous part.
				; NOTE: Use an 80x25 (WxH) console window for the best result.
				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc		; (4/6/03)
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

				; Memory locations.
 00000000 00			columnBegin	BYTE	0 ; DL
 00000001 4F			columnEnd	BYTE	79 ; DL
 00000002 59 6F 75 20 68	endMessageB	BYTE	"You hit the boundary!", 0Ah, 0Dh, "Game Over!", 0Ah, 0Dh, 0
	   69 74 20 74 68
	   65 20 62 6F 75
	   6E 64 61 72 79
	   21 0A 0D 47 61
	   6D 65 20 4F 76
	   65 72 21 0A 0D
	   00
 00000026 59 6F 75 20 72	endMessageP	BYTE	"You ran out of points!", 0Ah, 0Dh, "Game Over!", 0Ah, 0Dh, 0
	   61 6E 20 6F 75
	   74 20 6F 66 20
	   70 6F 69 6E 74
	   73 21 0A 0D 47
	   61 6D 65 20 4F
	   76 65 72 21 0A
	   0D 00
 0000004B 59 6F 75 20 66	endMessageE	BYTE	"You forfeited!", 0Ah, 0Dh, "Game Over!", 0Ah, 0Dh, 0
	   6F 72 66 65 69
	   74 65 64 21 0A
	   0D 47 61 6D 65
	   20 4F 76 65 72
	   21 0A 0D 00
 00000068 27			position	BYTE	39 ; Used for keeping track of column. Initial value is starting location.
 00000069 53 63 6F 72 65	score		BYTE	"Score: ", 0
	   3A 20 00
 00000071 50 6F 69 6E 74	pointBank	BYTE	"Point Bank: ", 0
	   20 42 61 6E 6B
	   3A 20 00
 0000007E 20 20 20 20 20	blank		BYTE	"        ", 0
	   20 20 20 00
 00000087 00000032		points		DWORD	50
 0000008B 00000000		bounces		DWORD	0

				; Macros.
 = 0000000B			ROW = 11 ; DH
 = 00000032			SPEED = 50 ; Change delay between movements in milliseconds.

 00000000			.code

				; Main procedure. Handles game over.
 00000000			main PROC
 00000000  E9 000000BA		jmp moveRight
 00000005			gameOverB:: ; Global label.
 00000005  E8 00000000 E		call Clrscr
 0000000A  BA 00000069 R		mov EDX, OFFSET score
 0000000F  E8 00000000 E		call WriteString
 00000014  A1 0000008B R		mov EAX, bounces
 00000019  E8 00000000 E		call WriteDec
 0000001E  E8 00000000 E		call Crlf
 00000023  BA 00000002 R		mov EDX, OFFSET endMessageB
 00000028  E8 00000000 E		call WriteString
 0000002D  E8 00000000 E		call Crlf
 00000032  E8 00000000 E		call WaitMsg
 00000037  E8 00000000 E		call Clrscr
					exit
 00000043			gameOverP::
 00000043  E8 00000000 E		call Clrscr
 00000048  BA 00000069 R		mov EDX, OFFSET score
 0000004D  E8 00000000 E		call WriteString
 00000052  A1 0000008B R		mov EAX, bounces
 00000057  E8 00000000 E		call WriteDec
 0000005C  E8 00000000 E		call Crlf
 00000061  BA 00000026 R		mov EDX, OFFSET endMessageP
 00000066  E8 00000000 E		call WriteString
 0000006B  E8 00000000 E		call Crlf
 00000070  E8 00000000 E		call WaitMsg
 00000075  E8 00000000 E		call Clrscr
					exit 
 00000081			gameOverE::
 00000081  E8 00000000 E		call Clrscr
 00000086  BA 00000069 R		mov EDX, OFFSET score
 0000008B  E8 00000000 E		call WriteString
 00000090  A1 0000008B R		mov EAX, bounces
 00000095  E8 00000000 E		call WriteDec
 0000009A  E8 00000000 E		call Crlf
 0000009F  BA 0000004B R		mov EDX, OFFSET endMessageE
 000000A4  E8 00000000 E		call WriteString
 000000A9  E8 00000000 E		call Crlf
 000000AE  E8 00000000 E		call WaitMsg
 000000B3  E8 00000000 E		call Clrscr
					exit
 000000BF			main ENDP

				; Moves a smiley face right across the screen.
 000000BF			moveRight PROC
 000000BF  83 3D 00000087 R	cmp points, 0
	   00
 000000C6  0F 8E FFFFFF77	jle gameOverP
 000000CC  E8 000000EC		call showScore
 000000D1  E8 0000011D		call showBank
 000000D6			Right:
 000000D6  E8 00000157			call leftBarrier
 000000DB  E8 0000013D			call rightBarrier
 000000E0  8A 15 00000068 R		mov DL, position ; DL is set to position for seamless transition.
 000000E6  B6 0B			mov DH, ROW ; So that the smiley face is in the middle heightwise.
 000000E8  E8 00000000 E		call Gotoxy
 000000ED  B0 01			mov AL, 1 ; The ASCII character of the smiley face.
 000000EF  E8 00000000 E		call WriteChar
 000000F4  B8 00000032			mov EAX, SPEED ; Delay in milliseconds.
 000000F9  E8 00000000 E		call Delay
 000000FE  E8 00000000 E		call Gotoxy ; Go back one.
 00000103  B0 20			mov AL, 32 ; The ASCII character of space.
 00000105  E8 00000000 E		call WriteChar
 0000010A  FE C2			inc DL
 0000010C  88 15 00000068 R		mov position, DL ; Saves DL to position as ReadKey overwrites the DX register.
 00000112  3A 15 00000001 R		cmp DL, columnEnd ; Column barrier initially is 79 (for an 80x25 screen). Decreases over time.
 00000118  0F 84 FFFFFEE7		je gameOverB
 0000011E  E8 00000000 E		call ReadKey ; Checks for key presses without an interrupt.
 00000123  3C 20			cmp AL, ' '
 00000125  0F 84 00000176		je pauseRight
 0000012B  80 FC 26			cmp AH, 26h ; Virtual-scan code for l and L.
 0000012E  0F 84 00000113		je setRight
 00000134  3C 1B			cmp AL, 1Bh ; ASCII code for ESC key.
 00000136  0F 84 FFFFFF45		je gameOverE
 0000013C  EB 98			jmp Right
 0000013E			moveRight ENDP

				; Moves the smiley face left across the screen.
 0000013E			moveLeft PROC
 0000013E  83 3D 00000087 R	cmp points, 0
	   00
 00000145  0F 8E FFFFFEF8	jle gameOverP
 0000014B  E8 0000006D		call showScore
 00000150  E8 0000009E		call showBank
 00000155			Left:
 00000155  E8 000000D8			call leftBarrier
 0000015A  E8 000000BE			call rightBarrier
 0000015F  8A 15 00000068 R		mov DL, position
 00000165  B6 0B			mov DH, ROW
 00000167  E8 00000000 E		call Gotoxy
 0000016C  B0 01			mov AL, 1
 0000016E  E8 00000000 E		call WriteChar
 00000173  B8 00000032			mov EAX, SPEED
 00000178  E8 00000000 E		call Delay
 0000017D  E8 00000000 E		call Gotoxy
 00000182  FE CA			dec DL
 00000184  B0 20			mov AL, 32
 00000186  E8 00000000 E		call WriteChar
 0000018B  88 15 00000068 R		mov position, DL
 00000191  3A 15 00000000 R		cmp DL, columnBegin
 00000197  0F 84 FFFFFE68		je gameOverB
 0000019D  E8 00000000 E		call ReadKey
 000001A2  3C 20			cmp AL, ' '
 000001A4  0F 84 00000105		je pauseLeft
 000001AA  80 FC 1E			cmp AH, 1Eh ; Virtual-scan code for a and A.
 000001AD  0F 84 000000C0		je setLeft
 000001B3  3C 1B			cmp AL, 1Bh
 000001B5  0F 84 FFFFFEC6		je gameOverE
 000001BB  EB 98			jmp Left
 000001BD			moveLeft ENDP

				; Shows the user's current score.
 000001BD			showScore PROC
 000001BD  66| BA 0000		mov DX, 0
 000001C1  E8 00000000 E	call Gotoxy
 000001C6  BA 00000069 R	mov EDX, OFFSET score
 000001CB  E8 00000000 E	call WriteString
 000001D0  A1 0000008B R	mov EAX, bounces
 000001D5  E8 00000000 E	call WriteDec
 000001DA  E8 00000000 E	call Crlf
 000001DF  C3			ret
 000001E0			showScore ENDP

				; Increses the score with every direction switch. Direction is determined with the AL register.
 000001E0			increaseScore PROC
 000001E0  FF 05 0000008B R	inc bounces
 000001E6  3C 01		cmp AL, 1
 000001E8  0F 85 FFFFFED1	jne moveRight
 000001EE  E9 FFFFFF4B		jmp moveLeft
 000001F3			increaseScore ENDP

				; Shows the user's remaining point bank.
 000001F3			showBank PROC
 000001F3  66| BA 0000		mov DX, 0
 000001F7  FE C6		inc DH
 000001F9  E8 00000000 E	call Gotoxy
 000001FE  BA 00000071 R	mov EDX, OFFSET pointBank
 00000203  E8 00000000 E	call WriteString
 00000208  A1 00000087 R	mov EAX, points
 0000020D  E8 00000000 E	call WriteDec
 00000212  BA 0000007E R	mov EDX, OFFSET blank
 00000217  E8 00000000 E	call WriteString
 0000021C  C3			ret
 0000021D			showBank ENDP

				; Shows the right barrier.
 0000021D			rightBarrier PROC
 0000021D  8A 15 00000001 R	mov DL, columnEnd
 00000223  B6 0B		mov DH, ROW
 00000225  E8 00000000 E	call Gotoxy
 0000022A  B0 DD		mov AL, 221
 0000022C  E8 00000000 E	call WriteChar
 00000231  C3			ret
 00000232			rightBarrier ENDP

				; Shows the left barrier.
 00000232			leftBarrier PROC
 00000232  8A 15 00000000 R	mov DL, columnBegin
 00000238  B6 0B		mov DH, ROW
 0000023A  E8 00000000 E	call Gotoxy
 0000023F  B0 DE		mov AL, 222  
 00000241  E8 00000000 E	call WriteChar
 00000246  C3			ret
 00000247			leftBarrier ENDP

				; Changes the right boundary based on where the smiley face is bounced.
 00000247			setRight PROC
 00000247  8A 35 00000001 Rmov DH, columnEnd
 0000024D  FE CE		dec DH
 0000024F  8A 15 00000068 R	mov DL, position
 00000255  B0 01		mov AL, 1 ; AL is used in increaseScore to know which direction the smiley face moves.
 00000257  38 F2		cmp DL, DH
 00000259  74 85		je increaseScore
 0000025B  88 15 00000001 R	mov columnEnd, DL
 00000261  FE C6		inc DH
 00000263  2A F2		sub DH, DL
 00000265  0F B6 D6		movzx EDX, DH
 00000268  29 15 00000087 R	sub points, EDX
 0000026E  E9 FFFFFF6D		jmp increaseScore
 00000273			setRight ENDP

				; Changes the left boundary based on where the smiley face is bounced.
 00000273			setLeft PROC
 00000273  8A 35 00000000 R	mov DH, columnBegin
 00000279  FE C6		inc DH
 0000027B  8A 15 00000068 R	mov DL, position
 00000281  38 F2		cmp DL, DH
 00000283  0F 84 FFFFFF57	je increaseScore
 00000289  88 15 00000000 R	mov columnBegin, DL
 0000028F  FE CE		dec DH
 00000291  2A D6		sub DL, DH
 00000293  0F B6 D2		movzx EDX, DL
 00000296  29 15 00000087 R	sub points, EDX
 0000029C  E9 FFFFFF3F		jmp increaseScore
 000002A1			setLeft ENDP

				; Pause for the smiley face moving right. Also fixes the smiley face disappearing.
 000002A1			pauseRight PROC
 000002A1  B0 01		mov AL, 1
 000002A3  E8 00000000 E	call WriteChar
 000002A8  B9 00000000		mov ECX, 0
 000002AD  EB 19		jmp space
 000002AF			pauseRight ENDP

				; Pause for the smiley face moving left. Same fix as above for the smiley face.
 000002AF			pauseLeft PROC
 000002AF  8A 15 00000068 R	mov DL, position
 000002B5  B6 0B		mov DH, ROW
 000002B7  E8 00000000 E	call Gotoxy
 000002BC  B0 01		mov AL, 1
 000002BE  E8 00000000 E	call WriteChar
 000002C3  B9 00000001		mov ECX, 1
 000002C8			pauseLeft ENDP

				; Infinite loop for the pause.
 000002C8			space PROC
 000002C8  E8 00000000 E	call ReadKey
 000002CD  3C 20		cmp AL, ' '
 000002CF  75 F7		jne space
 000002D1			space ENDP

				; Unpause and continue moving the smiley face in the last direction.
 000002D1			return PROC
 000002D1  83 F9 00		cmp ECX, 0
 000002D4  0F 84 FFFFFDE5	je moveRight
 000002DA  0F 85 FFFFFE5E	jne moveLeft
 000002E0			return ENDP

				END main
Microsoft (R) Macro Assembler Version 6.15.8803		    11/07/22 14:41:43
C:\Users\jclar\MEGA\School\CS2290\Labs\Assignment 7\Part 1.asm  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
INPUT_RECORD . . . . . . . . . .	 00000014
  eventType  . . . . . . . . . .	 00000000	 Word
  event  . . . . . . . . . . . .	 00000004	  00000010
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000008F DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002E0 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandtail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
increaseScore  . . . . . . . . .	P Near	 000001E0 _TEXT	Length= 00000013 Public STDCALL
leftBarrier  . . . . . . . . . .	P Near	 00000232 _TEXT	Length= 00000015 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000BF Public STDCALL
moveLeft . . . . . . . . . . . .	P Near	 0000013E _TEXT	Length= 0000007F Public STDCALL
  Left . . . . . . . . . . . . .	L Near	 00000155 _TEXT	
moveRight  . . . . . . . . . . .	P Near	 000000BF _TEXT	Length= 0000007F Public STDCALL
  Right  . . . . . . . . . . . .	L Near	 000000D6 _TEXT	
pauseLeft  . . . . . . . . . . .	P Near	 000002AF _TEXT	Length= 00000019 Public STDCALL
pauseRight . . . . . . . . . . .	P Near	 000002A1 _TEXT	Length= 0000000E Public STDCALL
return . . . . . . . . . . . . .	P Near	 000002D1 _TEXT	Length= 0000000F Public STDCALL
rightBarrier . . . . . . . . . .	P Near	 0000021D _TEXT	Length= 00000015 Public STDCALL
setLeft  . . . . . . . . . . . .	P Near	 00000273 _TEXT	Length= 0000002E Public STDCALL
setRight . . . . . . . . . . . .	P Near	 00000247 _TEXT	Length= 0000002C Public STDCALL
showBank . . . . . . . . . . . .	P Near	 000001F3 _TEXT	Length= 0000002A Public STDCALL
showScore  . . . . . . . . . . .	P Near	 000001BD _TEXT	Length= 00000023 Public STDCALL
space  . . . . . . . . . . . . .	P Near	 000002C8 _TEXT	Length= 00000009 Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LIGHT_BLUE . . . . . . . . . . .	Number	 00000009h   
LIGHT_CYAN . . . . . . . . . . .	Number	 0000000Bh   
LIGHT_GRAY . . . . . . . . . . .	Number	 00000007h   
LIGHT_GREEN  . . . . . . . . . .	Number	 0000000Ah   
LIGHT_MAGENTA  . . . . . . . . .	Number	 0000000Dh   
LIGHT_RED  . . . . . . . . . . .	Number	 0000000Ch   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ROW  . . . . . . . . . . . . . .	Number	 0000000Bh   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SPEED  . . . . . . . . . . . . .	Number	 00000032h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blank  . . . . . . . . . . . . .	Byte	 0000007E _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
bounces  . . . . . . . . . . . .	DWord	 0000008B _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
columnBegin  . . . . . . . . . .	Byte	 00000000 _DATA	
columnEnd  . . . . . . . . . . .	Byte	 00000001 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
endMessageB  . . . . . . . . . .	Byte	 00000002 _DATA	
endMessageE  . . . . . . . . . .	Byte	 0000004B _DATA	
endMessageP  . . . . . . . . . .	Byte	 00000026 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameOverB  . . . . . . . . . . .	L Near	 00000005 _TEXT	
gameOverE  . . . . . . . . . . .	L Near	 00000081 _TEXT	
gameOverP  . . . . . . . . . . .	L Near	 00000043 _TEXT	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
pointBank  . . . . . . . . . . .	Byte	 00000071 _DATA	
points . . . . . . . . . . . . .	DWord	 00000087 _DATA	
position . . . . . . . . . . . .	Byte	 00000068 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
score  . . . . . . . . . . . . .	Byte	 00000069 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
