Microsoft (R) Macro Assembler Version 6.15.8803		    10/25/24 10:59:21
C:\Users\jclar\MEGA\School\CS2290\Labs\Assignment 10\Part 1.asm	 Page 1 - 1


				; Author: Jeremey Larter
				; Lab Assignment #10 (Tron)
				; Purpose: To demonstrate different sorting algorithms in action.
				; NOTE: For best results use a 80x30 window size.
				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc		; (4/6/03)
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000 57 65 6C 63 6F	greet			BYTE	"Welcome to text-based Tron!", 0
	   6D 65 20 74 6F
	   20 74 65 78 74
	   2D 62 61 73 65
	   64 20 54 72 6F
	   6E 21 00
 0000001C 20 2D 20 49 6E	directions		BYTE	" - In this game you are trying to fill the entire grid with your light-cycle", 0Ah, 0Dh
	   20 74 68 69 73
	   20 67 61 6D 65
	   20 79 6F 75 20
	   61 72 65 20 74
	   72 79 69 6E 67
	   20 74 6F 20 66
	   69 6C 6C 20 74
	   68 65 20 65 6E
	   74 69 72 65 20
	   67 72 69 64 20
	   77 69 74 68 20
	   79 6F 75 72 20
	   6C 69 67 68 74
	   2D 63 79 63 6C
	   65 0A 0D
 0000006A  20 20 20 74 72					BYTE	"   trails without hitting the border, an obstacle, or your trail.", 0Ah, 0Dh
	   61 69 6C 73 20
	   77 69 74 68 6F
	   75 74 20 68 69
	   74 74 69 6E 67
	   20 74 68 65 20
	   62 6F 72 64 65
	   72 2C 20 61 6E
	   20 6F 62 73 74
	   61 63 6C 65 2C
	   20 6F 72 20 79
	   6F 75 72 20 74
	   72 61 69 6C 2E
	   0A 0D
 000000AD  20 2D 20 55 73					BYTE	" - Use the arrow keys to move your light-cycle. You can only move left or", 0Ah, 0Dh
	   65 20 74 68 65
	   20 61 72 72 6F
	   77 20 6B 65 79
	   73 20 74 6F 20
	   6D 6F 76 65 20
	   79 6F 75 72 20
	   6C 69 67 68 74
	   2D 63 79 63 6C
	   65 2E 20 59 6F
	   75 20 63 61 6E
	   20 6F 6E 6C 79
	   20 6D 6F 76 65
	   20 6C 65 66 74
	   20 6F 72 0A 0D
 000000F8  20 20 20 72 69					BYTE	"   right relative to where you are going.", 0Ah, 0Dh
	   67 68 74 20 72
	   65 6C 61 74 69
	   76 65 20 74 6F
	   20 77 68 65 72
	   65 20 79 6F 75
	   20 61 72 65 20
	   67 6F 69 6E 67
	   2E 0A 0D
 00000123  20 2D 20 45 76					BYTE	" - Every time you color 100 characters on the screen, the speed increases", 0Ah, 0Dh
	   65 72 79 20 74
	   69 6D 65 20 79
	   6F 75 20 63 6F
	   6C 6F 72 20 31
	   30 30 20 63 68
	   61 72 61 63 74
	   65 72 73 20 6F
	   6E 20 74 68 65
	   20 73 63 72 65
	   65 6E 2C 20 74
	   68 65 20 73 70
	   65 65 64 20 69
	   6E 63 72 65 61
	   73 65 73 0A 0D
 0000016E  20 20 20 28 75					BYTE	"   (until a minimum delay of 20ms is reached).", 0Ah, 0Dh
	   6E 74 69 6C 20
	   61 20 6D 69 6E
	   69 6D 75 6D 20
	   64 65 6C 61 79
	   20 6F 66 20 32
	   30 6D 73 20 69
	   73 20 72 65 61
	   63 68 65 64 29
	   2E 0A 0D
 0000019E  20 2D 20 45 76					BYTE	" - Every time you crash, you start over the current level.", 0Ah, 0Dh
	   65 72 79 20 74
	   69 6D 65 20 79
	   6F 75 20 63 72
	   61 73 68 2C 20
	   79 6F 75 20 73
	   74 61 72 74 20
	   6F 76 65 72 20
	   74 68 65 20 63
	   75 72 72 65 6E
	   74 20 6C 65 76
	   65 6C 2E 0A 0D
 000001DA  20 2D 20 46 6F					BYTE	" - For every 500 points you score, you get bumped up to the next level. Each", 0Ah, 0Dh
	   72 20 65 76 65
	   72 79 20 35 30
	   30 20 70 6F 69
	   6E 74 73 20 79
	   6F 75 20 73 63
	   6F 72 65 2C 20
	   79 6F 75 20 67
	   65 74 20 62 75
	   6D 70 65 64 20
	   75 70 20 74 6F
	   20 74 68 65 20
	   6E 65 78 74 20
	   6C 65 76 65 6C
	   2E 20 45 61 63
	   68 0A 0D
 00000228  20 20 20 6C 65					BYTE	"   level has procedurally-generated objects, the number of which corresponds", 0Ah, 0Dh
	   76 65 6C 20 68
	   61 73 20 70 72
	   6F 63 65 64 75
	   72 61 6C 6C 79
	   2D 67 65 6E 65
	   72 61 74 65 64
	   20 6F 62 6A 65
	   63 74 73 2C 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   20 6F 66 20 77
	   68 69 63 68 20
	   63 6F 72 72 65
	   73 70 6F 6E 64
	   73 0A 0D
 00000276  20 20 20 74 6F					BYTE	"   to the level number.", 0Ah, 0Dh
	   20 74 68 65 20
	   6C 65 76 65 6C
	   20 6E 75 6D 62
	   65 72 2E 0A 0D
 0000028F  20 2D 20 50 72					BYTE	" - Press SPACE any time to pause and play the game.", 0Ah, 0Dh
	   65 73 73 20 53
	   50 41 43 45 20
	   61 6E 79 20 74
	   69 6D 65 20 74
	   6F 20 70 61 75
	   73 65 20 61 6E
	   64 20 70 6C 61
	   79 20 74 68 65
	   20 67 61 6D 65
	   2E 0A 0D
 000002C4  20 2D 20 54 68					BYTE	" - The game goes on until you give up (press the ESC key).", 0
	   65 20 67 61 6D
	   65 20 67 6F 65
	   73 20 6F 6E 20
	   75 6E 74 69 6C
	   20 79 6F 75 20
	   67 69 76 65 20
	   75 70 20 28 70
	   72 65 73 73 20
	   74 68 65 20 45
	   53 43 20 6B 65
	   79 29 2E 00
 000002FF 50 72 65 73 73	promptMsg		BYTE	"Press any key to continue . . .", 0
	   20 61 6E 79 20
	   6B 65 79 20 74
	   6F 20 63 6F 6E
	   74 69 6E 75 65
	   20 2E 20 2E 20
	   2E 00
 0000031F 4C 65 76 65 6C	levelMsg		BYTE	"Level ", 0
	   20 00
 00000326 00			level			BYTE	0
 00000327 53 74 61 72 74	countMsg		BYTE	"Starting in ", 0
	   69 6E 67 20 69
	   6E 20 00
 00000334 4C 65 76 65 6C	levelScore		BYTE	"Level Score: ", 0
	   20 53 63 6F 72
	   65 3A 20 00
 00000342 43 75 6D 75 6C	cumulativeScore	BYTE	"Cumulative Score (of completed levels): ", 0
	   61 74 69 76 65
	   20 53 63 6F 72
	   65 20 28 6F 66
	   20 63 6F 6D 70
	   6C 65 74 65 64
	   20 6C 65 76 65
	   6C 73 29 3A 20
	   00
 0000036B 00000000		currentScore	DWORD	0
 0000036F 00000000		totalScore		DWORD	0
 00000373 00000064		limit			DWORD	100
 00000377 00000064		speed			DWORD	100
 0000037B  00000960 [		theGrid			BYTE	2400 dup(0)
	    00
	   ]

 = DH				ROW EQU DH
 = DL				COL EQU DL

 00000000			.code
				; Contains the pre-Game, score, and exit.
 00000000			Main PROC
 00000000  BA 00000000 R		mov EDX, OFFSET greet
 00000005  E8 00000000 E		call WriteString
 0000000A  E8 00000000 E		call Crlf
 0000000F  E8 00000000 E		call Crlf
 00000014  BA 0000001C R		mov EDX, OFFSET directions
 00000019  E8 00000000 E		call WriteString
 0000001E  E8 00000050			call NoPress
 00000023  E8 00000000 E		call Clrscr
 00000028			Program:
 00000028  E8 0000006C			call StartGame
 0000002D  50				push EAX
 0000002E  E8 00000040			call NoPress
 00000033  58				pop EAX
 00000034  83 F8 05			cmp EAX, 5 ; Escape code.
 00000037  74 33			je Done
 00000039  81 3D 0000036B R		cmp currentScore, 500
	   000001F4
 00000043  72 11			jb Skip
 00000045  FE 05 00000326 R		inc level ; New level when score is >= 500.
 0000004B  A1 0000036B R		mov EAX, currentScore
 00000050  01 05 0000036F R		add totalScore, EAX
 00000056			Skip:
 00000056  C7 05 0000036B R		mov currentScore, 0
	   00000000
 00000060  E8 00000285			call Reset
 00000065  E8 00000000 E		call Clrscr
 0000006A  EB BC			jmp Program
 0000006C			Done:
					exit
 00000073			Main ENDP

				; Procedure that mimics WaitMsg (but press any key instead of ENTER).
 00000073			NoPress PROC
 00000073  E8 00000000 E	call Crlf
 00000078  E8 00000000 E	call Crlf
 0000007D  BA 000002FF R	mov EDX, OFFSET promptMsg
 00000082  E8 00000000 E	call WriteString
 00000087			KeepHere:
 00000087  B8 00000032			mov EAX, 50
 0000008C  E8 00000000 E		call Delay
 00000091  E8 00000000 E		call ReadKey
 00000096  74 EF			jz KeepHere
 00000098  C3				ret
 00000099			NoPress ENDP

				; Starts the game. The grid is set up and the player spawns. EAX is used as codes for operations.
 00000099			StartGame PROC
 00000099  BA 0000031F R		mov EDX, OFFSET levelMsg
 0000009E  E8 00000000 E		call WriteString
 000000A3  0F B6 05			movzx EAX, level
	   00000326 R
 000000AA  E8 00000000 E		call WriteDec
 000000AF  E8 000000BD			call Countdown
 000000B4  E8 00000000 E		call Clrscr
 000000B9  B8 00000004			mov EAX, red + (black * 16) ; Borders and obstacles are red.
 000000BE  E8 00000000 E		call SetTextColor
 000000C3  E8 000000DE			call FillBorder
 000000C8  80 3D 00000326 R		cmp level, 0
	   00
 000000CF  74 10			je Skip
 000000D1  0F B6 0D			movzx ECX, level
	   00000326 R
 000000D8			Print:
 000000D8  51				push ECX
 000000D9  E8 0000015A			call CreateObstacle
 000000DE  59				pop ECX
 000000DF  E2 F7			loop Print
 000000E1			Skip:
 000000E1  B8 00000009			mov EAX, lightBlue + (black * 16) ; Light-cycle is blue.
 000000E6  E8 00000000 E		call SetTextColor
 000000EB  E8 000001C6			call SetPosition
 000000F0  E8 000001EA			call SetDirection
 000000F5			Right:
 000000F5  83 F8 00			cmp EAX, 0 ; Right code.
 000000F8  75 05			jne Down	
 000000FA  E8 00000214			call MoveRight
 000000FF			Down:
 000000FF  83 F8 01			cmp EAX, 1 ; Down code.
 00000102  75 05			jne Left
 00000104  E8 0000028E			call MoveDown
 00000109			Left:
 00000109  83 F8 02			cmp EAX, 2 ; Left code.
 0000010C  75 05			jne Up
 0000010E  E8 00000312			call MoveLeft
 00000113			Up:
 00000113  83 F8 03			cmp EAX, 3 ; Up code.
 00000116  75 05			jne Crash
 00000118  E8 00000394			call MoveUp
 0000011D			Crash:
 0000011D  83 F8 04			cmp EAX, 4 ; Crash code.
 00000120  75 24			jne Escape
 00000122  B8 00000007			mov EAX, lightGray + (black * 16)
 00000127  E8 00000000 E		call SetTextColor
 0000012C  E8 00000000 E		call Clrscr
 00000131  BA 00000334 R		mov EDX, OFFSET levelScore
 00000136  E8 00000000 E		call WriteString
 0000013B  A1 0000036B R		mov EAX, currentScore
 00000140  E8 00000000 E		call WriteDec
 00000145  C3				ret
 00000146			Escape:
 00000146  83 F8 05			cmp EAX, 5
 00000149  75 AA			jne Right
 0000014B  50				push EAX
 0000014C  B8 00000007			mov EAX, lightGray + (black * 16)
 00000151  E8 00000000 E		call SetTextColor
 00000156  E8 00000000 E		call Clrscr
 0000015B  BA 00000342 R		mov EDX, OFFSET cumulativeScore
 00000160  E8 00000000 E		call WriteString
 00000165  A1 0000036F R		mov EAX, totalScore
 0000016A  E8 00000000 E		call WriteDec
 0000016F  58				pop EAX
 00000170  C3				ret
 00000171			StartGame ENDP

				; Countdown before the game starts.
 00000171			Countdown PROC
 00000171  B6 0D			mov ROW, 13
 00000173  B2 21			mov COL, 33
 00000175  E8 00000000 E		call Gotoxy
 0000017A  BA 00000327 R		mov EDX, OFFSET countMsg
 0000017F  E8 00000000 E		call WriteString
 00000184  B9 00000003			mov ECX, 3
 00000189			Count:
 00000189  8B C1			mov EAX, ECX
 0000018B  E8 00000000 E		call WriteDec
 00000190  B8 000003E8			mov EAX, 1000
 00000195  E8 00000000 E		call Delay
 0000019A  B6 0D			mov ROW, 13
 0000019C  B2 2D			mov COL, 45
 0000019E  E8 00000000 E		call Gotoxy
 000001A3  E2 E4			loop Count
 000001A5  C3				ret
 000001A6			Countdown ENDP

				; Fills out the border in the grid.
 000001A6			FillBorder PROC
 000001A6  B2 00			mov COL, 0
 000001A8  B6 00			mov ROW, 0
 000001AA  B0 DB			mov AL, 219 ; ASCII code of block.
 000001AC  B9 00000050			mov ECX, 80
 000001B1			FillTop:
 000001B1  E8 00000000 E		call WriteChar
 000001B6  E8 00000384			call MultiplySize
 000001BB  C6 86 0000037B R		mov theGrid[ESI], 1
	   01
 000001C2  FE C2			inc COL
 000001C4  E2 EB			loop FillTop
 000001C6  B2 4F			mov COL, 79
 000001C8  B6 01			mov ROW, 1
 000001CA  E8 00000000 E		call Gotoxy
 000001CF  B9 0000001D			mov ECX, 29
 000001D4			FillRight:
 000001D4  E8 00000000 E		call WriteChar
 000001D9  E8 00000361			call MultiplySize
 000001DE  C6 86 0000037B R		mov theGrid[ESI], 1
	   01
 000001E5  FE C6			inc ROW
 000001E7  E8 00000000 E		call Gotoxy
 000001EC  E2 E6			loop FillRight
 000001EE  FE CA			dec COL
 000001F0  FE CE			dec ROW
 000001F2  E8 00000000 E		call Gotoxy
 000001F7  B9 0000004F			mov ECX, 79
 000001FC			FillBottom:
 000001FC  E8 00000000 E		call WriteChar
 00000201  E8 00000339			call MultiplySize
 00000206  C6 86 0000037B R		mov theGrid[ESI], 1
	   01
 0000020D  FE CA			dec COL
 0000020F  E8 00000000 E		call Gotoxy
 00000214  E2 E6			loop FillBottom
 00000216  FE C2			inc COL
 00000218  B9 0000001D			mov ECX, 29
 0000021D			FillLeft:
 0000021D  E8 00000000 E		call WriteChar
 00000222  E8 00000318			call MultiplySize
 00000227  C6 86 0000037B R		mov theGrid[ESI], 1
	   01
 0000022E  FE CE			dec ROW
 00000230  E8 00000000 E		call Gotoxy
 00000235  E2 E6			loop FillLeft
 00000237  C3				ret
 00000238			FillBorder ENDP

				; To be implemented.
 00000238			CreateObstacle PROC
 00000238  E8 00000039			call BoxPosition
 0000023D  E8 00000064			call SetColSize
 00000242  8B D9			mov EBX, ECX
 00000244  E8 0000004D			call SetRowSize
 00000249			BoxHeight:
 00000249  51				push ECX
 0000024A  8B CB			mov ECX, EBX
 0000024C  B4 00			mov AH, 0
 0000024E			BoxWidth:
 0000024E  B0 DB			mov AL, 219
 00000250  E8 00000000 E		call WriteChar
 00000255  53				push EBX
 00000256  E8 000002E4			call MultiplySize
 0000025B  5B				pop EBX
 0000025C  C6 86 0000037B R		mov theGrid[ESI], 1
	   01
 00000263  FE C4			inc AH
 00000265  FE C2			inc COL
 00000267  E2 E5			loop BoxWidth
 00000269  2A D4			sub COL, AH
 0000026B  FE C6			inc ROW
 0000026D  E8 00000000 E		call Gotoxy
 00000272  59				pop ECX
 00000273  E2 D4			loop BoxHeight
 00000275  C3				ret
 00000276			CreateObstacle ENDP

				; Sets a location to print out a box.
 00000276			BoxPosition PROC
 00000276  B8 00000042			mov EAX, 66
 0000027B  E8 00000000 E		call RandomRange
 00000280  40				inc EAX
 00000281  8A D0			mov COL, AL
 00000283  B8 00000016			mov EAX, 22
 00000288  E8 00000000 E		call RandomRange
 0000028D  40				inc EAX
 0000028E  8A F0			mov ROW, AL
 00000290  E8 00000000 E		call Gotoxy
 00000295  C3				ret
 00000296			BoxPosition ENDP

				; Gets a size for the height of the box.
 00000296			SetRowSize PROC
 00000296  B8 00000005			mov EAX, 5
 0000029B  E8 00000000 E		call RandomRange
 000002A0  83 C0 02			add EAX, 2
 000002A3  8B C8			mov ECX, EAX ; [2,6]
 000002A5  C3				ret
 000002A6			SetRowSize ENDP

				; Gets a size for the width of the box.
 000002A6			SetColSize PROC
 000002A6  B8 00000009			mov EAX, 9
 000002AB  E8 00000000 E		call RandomRange
 000002B0  83 C0 04			add EAX, 4
 000002B3  8B C8			mov ECX, EAX ; [4,12]
 000002B5  C3				ret
 000002B6			SetColSize ENDP

				; Sets a starting location for the light-cycle.
 000002B6			SetPosition PROC
 000002B6  E8 00000000 E		call Randomize
 000002BB  B8 0000001C			mov EAX, 28
 000002C0  E8 00000000 E		call RandomRange
 000002C5  83 C0 19			add EAX, 25
 000002C8  8A D0			mov COL, AL
 000002CA  B8 00000008			mov EAX, 8
 000002CF  E8 00000000 E		call RandomRange
 000002D4  83 C0 0A			add EAX, 10
 000002D7  8A F0			mov ROW, AL
 000002D9  E8 00000000 E		call Gotoxy
 000002DE  C3				ret
 000002DF			SetPosition ENDP

				; Sets a starting direction for the light-cycle.
 000002DF			SetDirection PROC
 000002DF  B8 00000004			mov EAX, 4
 000002E4  E8 00000000 E		call RandomRange
 000002E9  C3				ret
 000002EA			SetDirection ENDP

				; Resets the game.
 000002EA			Reset PROC
 000002EA  C7 05 00000377 R		mov speed, 100
	   00000064
 000002F4  C7 05 00000373 R		mov limit, 100
	   00000064
 000002FE  BE 00000000			mov ESI, 0
 00000303  B9 00000960			mov ECX, 2400
 00000308			Clear:
 00000308  C6 86 0000037B R		mov theGrid[ESI], 0
	   00
 0000030F  46				inc ESI
 00000310  E2 F6			loop Clear
 00000312  C3				ret
 00000313			Reset ENDP

				; Continually moves the light-cycle right until a designated key is pressed or the light-cycle is over a covered area.
 00000313			MoveRight PROC
 00000313  B0 DB			mov AL, 219
 00000315			Move:
 00000315  E8 00000225			call MultiplySize
 0000031A  80 BE 0000037B R		cmp theGrid[ESI], 1
	   01
 00000321  74 6E			je Crash
 00000323  E8 00000000 E		call WriteChar
 00000328  C6 86 0000037B R		mov theGrid[ESI], 1
	   01
 0000032F  FF 05 0000036B R		inc currentScore
 00000335  FE C2			inc COL
 00000337  50				push EAX
 00000338  A1 00000373 R		mov EAX, limit
 0000033D  39 05 0000036B R		cmp currentScore, EAX
 00000343  75 05			jne Stay
 00000345  E8 00000220			call IncreaseSpeed
 0000034A			Stay:
 0000034A  A1 00000377 R		mov EAX, speed
 0000034F  E8 00000000 E		call Delay
 00000354  52				push EDX
 00000355  E8 00000000 E		call ReadKey
 0000035A  5A				pop EDX
 0000035B  80 FC 50			cmp AH, 50h ; Virtual-scan code for DOWN arrow.
 0000035E  75 07			jne Next
 00000360  58				pop EAX
 00000361  B8 00000001			mov EAX, 1
 00000366  C3				ret
 00000367			Next:
 00000367  80 FC 48			cmp AH, 48h ; Virtual-scan code for UP arrow.
 0000036A  75 07			jne Escape
 0000036C  58				pop EAX
 0000036D  B8 00000003			mov EAX, 3
 00000372  C3				ret
 00000373			Escape:
 00000373  80 FC 01			cmp AH, 01h ; Virtual-scan code for ESC.
 00000376  75 0C			jne SpaceCheck
 00000378  E8 FFFFFF6D			call Reset
 0000037D  58				pop EAX
 0000037E  B8 00000005			mov EAX, 5
 00000383  C3				ret
 00000384			SpaceCheck:
 00000384  80 FC 39			cmp AH, 39h ; Virtual-scan code for SPACE.
 00000387  75 05			jne Continue
 00000389  E8 000001C5			call PauseGame
 0000038E			Continue:
 0000038E  58				pop EAX
 0000038F  EB 84			jmp Move
 00000391			Crash:
 00000391  B8 00000004			mov EAX, 4
 00000396  C3				ret
 00000397			MoveRight ENDP

				; Continually moves the light-cycle down until a designated key is pressed or the light-cycle is over a covered area.
 00000397			MoveDown PROC
 00000397  B0 DB			mov AL, 219
 00000399			Move:
 00000399  E8 000001A1			call MultiplySize
 0000039E  80 BE 0000037B R		cmp theGrid[ESI], 1
	   01
 000003A5  74 78			je Crash
 000003A7  E8 00000000 E		call WriteChar
 000003AC  C6 86 0000037B R		mov theGrid[ESI], 1
	   01
 000003B3  FF 05 0000036B R		inc currentScore
 000003B9  FE C6			inc ROW
 000003BB  E8 00000000 E		call Gotoxy
 000003C0  50				push EAX
 000003C1  A1 00000373 R		mov EAX, limit
 000003C6  39 05 0000036B R		cmp currentScore, EAX
 000003CC  75 05			jne Stay
 000003CE  E8 00000197			call IncreaseSpeed
 000003D3			Stay:
 000003D3  A1 00000377 R		mov EAX, speed
 000003D8  D1 E0			shl EAX, 1 ; Cuts the speed in half for vertical movement as characters are longer heightwise.
 000003DA  E8 00000000 E		call Delay
 000003DF  52				push EDX
 000003E0  E8 00000000 E		call ReadKey
 000003E5  5A				pop EDX
 000003E6  80 FC 4D			cmp AH, 4Dh ; Virtual-scan code for RIGHT arrow.
 000003E9  75 07			jne Next
 000003EB  58				pop EAX
 000003EC  B8 00000000			mov EAX, 0
 000003F1  C3				ret
 000003F2			Next:
 000003F2  80 FC 4B			cmp AH, 4Bh ; Virtual-scan code for LEFT arrow.
 000003F5  75 07			jne Escape
 000003F7  58				pop EAX
 000003F8  B8 00000002			mov EAX, 2
 000003FD  C3				ret
 000003FE			Escape:
 000003FE  80 FC 01			cmp AH, 01h
 00000401  75 0C			jne SpaceCheck
 00000403  E8 FFFFFEE2			call Reset
 00000408  58				pop EAX
 00000409  B8 00000005			mov EAX, 5
 0000040E  C3				ret
 0000040F			SpaceCheck:
 0000040F  80 FC 39			cmp AH, 39h
 00000412  75 05			jne Continue
 00000414  E8 0000013A			call PauseGame
 00000419			Continue:
 00000419  58				pop EAX
 0000041A  E9 FFFFFF7A			jmp Move
 0000041F			Crash:
 0000041F  B8 00000004			mov EAX, 4
 00000424  C3				ret
 00000425			MoveDown ENDP

				; Continually moves the light-cycle left until a designated key is pressed or the light-cycle is over a covered area.
 00000425			MoveLeft PROC
 00000425  B0 DB			mov AL, 219
 00000427			Move:
 00000427  E8 00000113			call MultiplySize
 0000042C  80 BE 0000037B R		cmp theGrid[ESI], 1
	   01
 00000433  74 76			je Crash
 00000435  E8 00000000 E		call WriteChar
 0000043A  C6 86 0000037B R		mov theGrid[ESI], 1
	   01
 00000441  FF 05 0000036B R		inc currentScore
 00000447  FE CA			dec COL
 00000449  E8 00000000 E		call Gotoxy
 0000044E  50				push EAX
 0000044F  A1 00000373 R		mov EAX, limit
 00000454  39 05 0000036B R		cmp currentScore, EAX
 0000045A  75 05			jne Stay
 0000045C  E8 00000109			call IncreaseSpeed
 00000461			Stay:
 00000461  A1 00000377 R		mov EAX, speed
 00000466  E8 00000000 E		call Delay
 0000046B  52				push EDX
 0000046C  E8 00000000 E		call ReadKey
 00000471  5A				pop EDX
 00000472  80 FC 48			cmp AH, 48h
 00000475  75 07			jne Next
 00000477  58				pop EAX
 00000478  B8 00000003			mov EAX, 3
 0000047D  C3				ret
 0000047E			Next:
 0000047E  80 FC 50			cmp AH, 50h
 00000481  75 07			jne Escape
 00000483  58				pop EAX
 00000484  B8 00000001			mov EAX, 1
 00000489  C3				ret
 0000048A			Escape:
 0000048A  80 FC 01			cmp AH, 01h
 0000048D  75 0C			jne SpaceCheck
 0000048F  E8 FFFFFE56			call Reset
 00000494  58				pop EAX
 00000495  B8 00000005			mov EAX, 5
 0000049A  C3				ret
 0000049B			SpaceCheck:
 0000049B  80 FC 39			cmp AH, 39h
 0000049E  75 05			jne Continue
 000004A0  E8 000000AE			call PauseGame
 000004A5			Continue:
 000004A5  58				pop EAX
 000004A6  E9 FFFFFF7C			jmp Move
 000004AB			Crash:
 000004AB  B8 00000004			mov EAX, 4
 000004B0  C3				ret
 000004B1			MoveLeft ENDP

				; Continually moves the light-cycle up until a designated key is pressed or the light-cycle is over a covered area.
 000004B1			MoveUp PROC
 000004B1  B0 DB			mov AL, 219
 000004B3			Move:
 000004B3  E8 00000087			call MultiplySize
 000004B8  80 BE 0000037B R		cmp theGrid[ESI], 1
	   01
 000004BF  74 78			je Crash
 000004C1  E8 00000000 E		call WriteChar
 000004C6  C6 86 0000037B R		mov theGrid[ESI], 1
	   01
 000004CD  FF 05 0000036B R		inc currentScore
 000004D3  FE CE			dec ROW
 000004D5  E8 00000000 E		call Gotoxy
 000004DA  50				push EAX
 000004DB  A1 00000373 R		mov EAX, limit
 000004E0  39 05 0000036B R		cmp currentScore, EAX
 000004E6  75 05			jne Stay
 000004E8  E8 0000007D			call IncreaseSpeed
 000004ED			Stay:
 000004ED  A1 00000377 R		mov EAX, speed
 000004F2  D1 E0			shl EAX, 1
 000004F4  E8 00000000 E		call Delay
 000004F9  52				push EDX
 000004FA  E8 00000000 E		call ReadKey
 000004FF  5A				pop EDX
 00000500  80 FC 4D			cmp AH, 4Dh
 00000503  75 07			jne Next
 00000505  58				pop EAX
 00000506  B8 00000000			mov EAX, 0
 0000050B  C3				ret
 0000050C			Next:
 0000050C  80 FC 4B			cmp AH, 4Bh
 0000050F  75 07			jne Escape
 00000511  58				pop EAX
 00000512  B8 00000002			mov EAX, 2
 00000517  C3				ret
 00000518			Escape:
 00000518  80 FC 01			cmp AH, 01h
 0000051B  75 0C			jne SpaceCheck
 0000051D  E8 FFFFFDC8			call Reset
 00000522  58				pop EAX
 00000523  B8 00000005			mov EAX, 5
 00000528  C3				ret
 00000529			SpaceCheck:
 00000529  80 FC 39			cmp AH, 39h
 0000052C  75 05			jne Continue
 0000052E  E8 00000020			call PauseGame
 00000533			Continue:
 00000533  58				pop EAX
 00000534  E9 FFFFFF7A			jmp Move
 00000539			Crash:
 00000539  B8 00000004			mov EAX, 4
 0000053E  C3				ret
 0000053F			MoveUp ENDP

				; Multiplies ESI by the size of an abstract 2D-array. Used for accessing elements in theGrid array.
 0000053F			MultiplySize PROC
 0000053F  0F B6 F6			movzx ESI, ROW
 00000542  C1 E6 06			shl ESI, 6 ; Multiply by 64.
 00000545  0F B6 DE			movzx EBX, ROW
 00000548  C1 E3 04			shl EBX, 4 ; Multiply by 16.
 0000054B  03 F3			add ESI, EBX ; Multiply by 80.
 0000054D  0F B6 DA			movzx EBX, COL
 00000550  03 F3			add ESI, EBX
 00000552  C3				ret
 00000553			MultiplySize ENDP

				; Freezes movement until SPACE is pressed.
 00000553			PauseGame PROC
 00000553			KeepHere:
 00000553  B8 00000032			mov EAX, 50
 00000558  E8 00000000 E		call Delay
 0000055D  52				push EDX
 0000055E  E8 00000000 E		call ReadKey
 00000563  5A				pop EDX
 00000564  80 FC 39			cmp AH, 39h
 00000567  75 EA			jne KeepHere
 00000569  C3				ret
 0000056A			PauseGame ENDP

				; Decreases the delay between character writes until 20ms is reached.
 0000056A			IncreaseSpeed PROC
 0000056A  83 3D 00000377 R		cmp speed, 20
	   14
 00000571  74 07			je Skip
 00000573  83 2D 00000377 R		sub speed, 20
	   14
 0000057A			Skip:
 0000057A  83 05 00000373 R		add limit, 100
	   64
 00000581  C3				ret
 00000582			IncreaseSpeed ENDP

				END Main
Microsoft (R) Macro Assembler Version 6.15.8803		    10/25/24 10:59:21
C:\Users\jclar\MEGA\School\CS2290\Labs\Assignment 10\Part 1.asm	 Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
INPUT_RECORD . . . . . . . . . .	 00000014
  eventType  . . . . . . . . . .	 00000000	 Word
  event  . . . . . . . . . . . .	 00000004	  00000010
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000CDB DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000582 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

BoxPosition  . . . . . . . . . .	P Near	 00000276 _TEXT	Length= 00000020 Public STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Countdown  . . . . . . . . . . .	P Near	 00000171 _TEXT	Length= 00000035 Public STDCALL
  Count  . . . . . . . . . . . .	L Near	 00000189 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateObstacle . . . . . . . . .	P Near	 00000238 _TEXT	Length= 0000003E Public STDCALL
  BoxHeight  . . . . . . . . . .	L Near	 00000249 _TEXT	
  BoxWidth . . . . . . . . . . .	L Near	 0000024E _TEXT	
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FillBorder . . . . . . . . . . .	P Near	 000001A6 _TEXT	Length= 00000092 Public STDCALL
  FillTop  . . . . . . . . . . .	L Near	 000001B1 _TEXT	
  FillRight  . . . . . . . . . .	L Near	 000001D4 _TEXT	
  FillBottom . . . . . . . . . .	L Near	 000001FC _TEXT	
  FillLeft . . . . . . . . . . .	L Near	 0000021D _TEXT	
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandtail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IncreaseSpeed  . . . . . . . . .	P Near	 0000056A _TEXT	Length= 00000018 Public STDCALL
  Skip . . . . . . . . . . . . .	L Near	 0000057A _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000073 Public STDCALL
  Program  . . . . . . . . . . .	L Near	 00000028 _TEXT	
  Skip . . . . . . . . . . . . .	L Near	 00000056 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 0000006C _TEXT	
MoveDown . . . . . . . . . . . .	P Near	 00000397 _TEXT	Length= 0000008E Public STDCALL
  Move . . . . . . . . . . . . .	L Near	 00000399 _TEXT	
  Stay . . . . . . . . . . . . .	L Near	 000003D3 _TEXT	
  Next . . . . . . . . . . . . .	L Near	 000003F2 _TEXT	
  Escape . . . . . . . . . . . .	L Near	 000003FE _TEXT	
  SpaceCheck . . . . . . . . . .	L Near	 0000040F _TEXT	
  Continue . . . . . . . . . . .	L Near	 00000419 _TEXT	
  Crash  . . . . . . . . . . . .	L Near	 0000041F _TEXT	
MoveLeft . . . . . . . . . . . .	P Near	 00000425 _TEXT	Length= 0000008C Public STDCALL
  Move . . . . . . . . . . . . .	L Near	 00000427 _TEXT	
  Stay . . . . . . . . . . . . .	L Near	 00000461 _TEXT	
  Next . . . . . . . . . . . . .	L Near	 0000047E _TEXT	
  Escape . . . . . . . . . . . .	L Near	 0000048A _TEXT	
  SpaceCheck . . . . . . . . . .	L Near	 0000049B _TEXT	
  Continue . . . . . . . . . . .	L Near	 000004A5 _TEXT	
  Crash  . . . . . . . . . . . .	L Near	 000004AB _TEXT	
MoveRight  . . . . . . . . . . .	P Near	 00000313 _TEXT	Length= 00000084 Public STDCALL
  Move . . . . . . . . . . . . .	L Near	 00000315 _TEXT	
  Stay . . . . . . . . . . . . .	L Near	 0000034A _TEXT	
  Next . . . . . . . . . . . . .	L Near	 00000367 _TEXT	
  Escape . . . . . . . . . . . .	L Near	 00000373 _TEXT	
  SpaceCheck . . . . . . . . . .	L Near	 00000384 _TEXT	
  Continue . . . . . . . . . . .	L Near	 0000038E _TEXT	
  Crash  . . . . . . . . . . . .	L Near	 00000391 _TEXT	
MoveUp . . . . . . . . . . . . .	P Near	 000004B1 _TEXT	Length= 0000008E Public STDCALL
  Move . . . . . . . . . . . . .	L Near	 000004B3 _TEXT	
  Stay . . . . . . . . . . . . .	L Near	 000004ED _TEXT	
  Next . . . . . . . . . . . . .	L Near	 0000050C _TEXT	
  Escape . . . . . . . . . . . .	L Near	 00000518 _TEXT	
  SpaceCheck . . . . . . . . . .	L Near	 00000529 _TEXT	
  Continue . . . . . . . . . . .	L Near	 00000533 _TEXT	
  Crash  . . . . . . . . . . . .	L Near	 00000539 _TEXT	
MultiplySize . . . . . . . . . .	P Near	 0000053F _TEXT	Length= 00000014 Public STDCALL
NoPress  . . . . . . . . . . . .	P Near	 00000073 _TEXT	Length= 00000026 Public STDCALL
  KeepHere . . . . . . . . . . .	L Near	 00000087 _TEXT	
PauseGame  . . . . . . . . . . .	P Near	 00000553 _TEXT	Length= 00000017 Public STDCALL
  KeepHere . . . . . . . . . . .	L Near	 00000553 _TEXT	
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Reset  . . . . . . . . . . . . .	P Near	 000002EA _TEXT	Length= 00000029 Public STDCALL
  Clear  . . . . . . . . . . . .	L Near	 00000308 _TEXT	
SetColSize . . . . . . . . . . .	P Near	 000002A6 _TEXT	Length= 00000010 Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetDirection . . . . . . . . . .	P Near	 000002DF _TEXT	Length= 0000000B Public STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetPosition  . . . . . . . . . .	P Near	 000002B6 _TEXT	Length= 00000029 Public STDCALL
SetRowSize . . . . . . . . . . .	P Near	 00000296 _TEXT	Length= 00000010 Public STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StartGame  . . . . . . . . . . .	P Near	 00000099 _TEXT	Length= 000000D8 Public STDCALL
  Print  . . . . . . . . . . . .	L Near	 000000D8 _TEXT	
  Skip . . . . . . . . . . . . .	L Near	 000000E1 _TEXT	
  Right  . . . . . . . . . . . .	L Near	 000000F5 _TEXT	
  Down . . . . . . . . . . . . .	L Near	 000000FF _TEXT	
  Left . . . . . . . . . . . . .	L Near	 00000109 _TEXT	
  Up . . . . . . . . . . . . . .	L Near	 00000113 _TEXT	
  Crash  . . . . . . . . . . . .	L Near	 0000011D _TEXT	
  Escape . . . . . . . . . . . .	L Near	 00000146 _TEXT	
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
COL  . . . . . . . . . . . . . .	Text   	 DL
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LIGHT_BLUE . . . . . . . . . . .	Number	 00000009h   
LIGHT_CYAN . . . . . . . . . . .	Number	 0000000Bh   
LIGHT_GRAY . . . . . . . . . . .	Number	 00000007h   
LIGHT_GREEN  . . . . . . . . . .	Number	 0000000Ah   
LIGHT_MAGENTA  . . . . . . . . .	Number	 0000000Dh   
LIGHT_RED  . . . . . . . . . . .	Number	 0000000Ch   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ROW  . . . . . . . . . . . . . .	Text   	 DH
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countMsg . . . . . . . . . . . .	Byte	 00000327 _DATA	
cumulativeScore  . . . . . . . .	Byte	 00000342 _DATA	
currentScore . . . . . . . . . .	DWord	 0000036B _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
directions . . . . . . . . . . .	Byte	 0000001C _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greet  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
levelMsg . . . . . . . . . . . .	Byte	 0000031F _DATA	
levelScore . . . . . . . . . . .	Byte	 00000334 _DATA	
level  . . . . . . . . . . . . .	Byte	 00000326 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
limit  . . . . . . . . . . . . .	DWord	 00000373 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
promptMsg  . . . . . . . . . . .	Byte	 000002FF _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
speed  . . . . . . . . . . . . .	DWord	 00000377 _DATA	
theGrid  . . . . . . . . . . . .	Byte	 0000037B _DATA	
totalScore . . . . . . . . . . .	DWord	 0000036F _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
