Microsoft (R) Macro Assembler Version 6.15.8803		    10/25/24 11:08:15
C:\Users\jclar\MEGA\School\CS2290\Labs\Assignment 9\Part 5.asm  Page 1 - 1


				; Author: Jeremey Larter
				; Lab Assignment #9 Part 5 (Sorting Algorithms Visualization)
				; Purpose: To demonstrate different sorting algorithms in action.
				; NOTE: For best results use a 100x38 window size
				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc		; (4/6/03)
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
				; Memory allocations.
 00000000  00000032 [		array		BYTE	50 dup(?)
	    00
	   ]
 00000032 54 68 65 20 75	message1	BYTE	"The unsorted array is as follows:", 0Ah, 0Dh, 0
	   6E 73 6F 72 74
	   65 64 20 61 72
	   72 61 79 20 69
	   73 20 61 73 20
	   66 6F 6C 6C 6F
	   77 73 3A 0A 0D
	   00
 00000056 50 72 65 73 73	prompt1		BYTE	"Press any key to sort . . .", 0
	   20 61 6E 79 20
	   6B 65 79 20 74
	   6F 20 73 6F 72
	   74 20 2E 20 2E
	   20 2E 00
 00000072 50 72 65 73 73	prompt2		BYTE	"Press any key to continue . . .", 0
	   20 61 6E 79 20
	   6B 65 79 20 74
	   6F 20 63 6F 6E
	   74 69 6E 75 65
	   20 2E 20 2E 20
	   2E 00
 00000092 54 68 65 20 73	message2	BYTE	"The sorted array is as follows:", 0Ah, 0Dh, 0
	   6F 72 74 65 64
	   20 61 72 72 61
	   79 20 69 73 20
	   61 73 20 66 6F
	   6C 6C 6F 77 73
	   3A 0A 0D 00
 000000B4 57 68 69 63 68	choiceSort	BYTE	"Which sorting algorithm do you want to see?", 0
	   20 73 6F 72 74
	   69 6E 67 20 61
	   6C 67 6F 72 69
	   74 68 6D 20 64
	   6F 20 79 6F 75
	   20 77 61 6E 74
	   20 74 6F 20 73
	   65 65 3F 00
 000000E0 49 6E 73 65 72	insertion	BYTE	"Insertion Sort", 0
	   74 69 6F 6E 20
	   53 6F 72 74 00
 000000EF 42 75 62 62 6C	bubble		BYTE	"Bubble Sort", 0
	   65 20 53 6F 72
	   74 00
 000000FB 53 65 6C 65 63	selection	BYTE	"Selection Sort", 0
	   74 69 6F 6E 20
	   53 6F 72 74 00
 0000010A 57 68 61 74 20	choiceSpeed	BYTE	"What speed do you want the sorting alogrithm to run at?", 0
	   73 70 65 65 64
	   20 64 6F 20 79
	   6F 75 20 77 61
	   6E 74 20 74 68
	   65 20 73 6F 72
	   74 69 6E 67 20
	   61 6C 6F 67 72
	   69 74 68 6D 20
	   74 6F 20 72 75
	   6E 20 61 74 3F
	   00
 00000142 31 2E 30 30 73	slow		BYTE	"1.00s", 0
	   00
 00000148 30 2E 35 30 73	normal		BYTE	"0.50s", 0
	   00
 0000014E 30 2E 32 35 73	fast		BYTE	"0.25s", 0
	   00
 00000154 30 2E 31 30 73	extreme		BYTE	"0.10s", 0
	   00
 0000015A 02			arrowLoc	BYTE	2
 0000015B 00000000		index		DWORD	0
 0000015F 00000001		partition	DWORD	1
 00000163 00000001		algorithm	DWORD	1
 00000167 000003E8		speed		DWORD	1000

 00000000			.code
				; Contains the menu for selecting an algorithm.
 00000000			Main PROC
 00000000  E8 00000000 E	call Clrscr
 00000005  BA 000000B4 R	mov EDX, OFFSET choiceSort
 0000000A  E8 00000000 E	call WriteString
 0000000F  8A 35 0000015A R	mov DH, arrowLoc
 00000015  B2 00		mov DL, 0
 00000017  E8 00000000 E	call Gotoxy
 0000001C  B0 3E		mov AL, 62 ; ASCII code of right arrow.
 0000001E  E8 00000000 E	call WriteChar
 00000023  B6 02		mov DH, 2
 00000025  B2 04		mov DL, 4
 00000027  E8 00000000 E	call Gotoxy
 0000002C  BA 000000E0 R	mov EDX, OFFSET insertion
 00000031  E8 00000000 E	call WriteString
 00000036  B6 03		mov DH, 3
 00000038  B2 04		mov DL, 4
 0000003A  E8 00000000 E	call Gotoxy
 0000003F  BA 000000EF R	mov EDX, OFFSET bubble
 00000044  E8 00000000 E	call WriteString
 00000049  B6 04		mov DH, 4
 0000004B  B2 04		mov DL, 4
 0000004D  E8 00000000 E	call Gotoxy
 00000052  BA 000000FB R	mov EDX, OFFSET selection
 00000057  E8 00000000 E	call WriteString
 0000005C			Cursor:
 0000005C  8A 35 0000015A R		mov DH, arrowLoc
 00000062  B2 00			mov DL, 0
 00000064  E8 00000000 E		call Gotoxy
 00000069  B8 00000032			mov EAX, 50
 0000006E  E8 00000000 E		call Delay
 00000073  66| 52			push DX
 00000075  E8 00000000 E		call ReadKey
 0000007A  80 FC 50			cmp AH, 50h ; Virtual-scan code for DOWN key.
 0000007D  74 0C			je Down
 0000007F  80 FC 48			cmp AH, 48h ; Virtual-scan code for UP key.
 00000082  74 27			je Up
 00000084  80 FC 1C			cmp AH, 1Ch ; Virtual-scan code for ENTER key.
 00000087  74 42			je SetAlgorithm
 00000089  EB D1			jmp Cursor
 0000008B			Down:
 0000008B  66| 5A			pop DX
 0000008D  80 FE 04			cmp DH, 4
 00000090  75 0C			jne SetArrowD
 00000092  C6 05 0000015A R		mov arrowLoc, 2
	   02
 00000099  E9 FFFFFF62			jmp Main
 0000009E			SetArrowD:
 0000009E  FE C6			inc DH
 000000A0  88 35 0000015A R		mov arrowLoc, DH
 000000A6  E9 FFFFFF55			jmp Main
 000000AB			Up:
 000000AB  66| 5A			pop DX
 000000AD  80 FE 02			cmp DH, 2
 000000B0  75 0C			jne SetArrowU
 000000B2  C6 05 0000015A R		mov arrowLoc, 4
	   04
 000000B9  E9 FFFFFF42			jmp Main
 000000BE			SetArrowU:
 000000BE  FE CE			dec DH
 000000C0  88 35 0000015A R		mov arrowLoc, DH
 000000C6  E9 FFFFFF35			jmp Main
 000000CB			SetAlgorithm:
 000000CB  E8 00000000 E		call Clrscr
 000000D0  C6 05 0000015A R		mov arrowLoc, 2
	   02
 000000D7  66| 5A			pop DX
 000000D9  80 FE 02			cmp DH, 2
 000000DC  74 19			je ChooseSpeed
 000000DE  C7 05 00000163 R		mov algorithm, 2
	   00000002
 000000E8  80 FE 03			cmp DH, 3
 000000EB  74 0A			je ChooseSpeed
 000000ED  C7 05 00000163 R		mov algorithm, 3
	   00000003
 000000F7			Main ENDP

				; Contains the menu for selecting a speed.
 000000F7			ChooseSpeed PROC
 000000F7  E8 00000000 E	call Clrscr
 000000FC  BA 0000010A R	mov EDX, OFFSET choiceSpeed
 00000101  E8 00000000 E	call WriteString
 00000106  8A 35 0000015A R	mov DH, arrowLoc
 0000010C  B2 00		mov DL, 0
 0000010E  E8 00000000 E	call Gotoxy
 00000113  B0 3E		mov AL, 62
 00000115  E8 00000000 E	call WriteChar
 0000011A  B6 02		mov DH, 2
 0000011C  B2 04		mov DL, 4
 0000011E  E8 00000000 E	call Gotoxy
 00000123  BA 00000142 R	mov EDX, OFFSET slow
 00000128  E8 00000000 E	call WriteString
 0000012D  B6 03		mov DH, 3
 0000012F  B2 04		mov DL, 4
 00000131  E8 00000000 E	call Gotoxy
 00000136  BA 00000148 R	mov EDX, OFFSET normal
 0000013B  E8 00000000 E	call WriteString
 00000140  B6 04		mov DH, 4
 00000142  B2 04		mov DL, 4
 00000144  E8 00000000 E	call Gotoxy
 00000149  BA 0000014E R	mov EDX, OFFSET fast
 0000014E  E8 00000000 E	call WriteString
 00000153  B6 05		mov DH, 5
 00000155  B2 04		mov DL, 4
 00000157  E8 00000000 E	call Gotoxy
 0000015C  BA 00000154 R	mov EDX, OFFSET extreme
 00000161  E8 00000000 E	call WriteString
 00000166			Cursor:
 00000166  8A 35 0000015A R		mov DH, arrowLoc
 0000016C  B2 00			mov DL, 0
 0000016E  E8 00000000 E		call Gotoxy
 00000173  B8 00000032			mov EAX, 50
 00000178  E8 00000000 E		call Delay
 0000017D  66| 52			push DX
 0000017F  E8 00000000 E		call ReadKey
 00000184  80 FC 50			cmp AH, 50h
 00000187  74 0C			je Down
 00000189  80 FC 48			cmp AH, 48h
 0000018C  74 27			je Up
 0000018E  80 FC 1C			cmp AH, 1Ch
 00000191  74 42			je SetSpeed
 00000193  EB D1			jmp Cursor
 00000195			Down:
 00000195  66| 5A			pop DX
 00000197  80 FE 05			cmp DH, 5
 0000019A  75 0C			jne SetArrowD
 0000019C  C6 05 0000015A R		mov arrowLoc, 2
	   02
 000001A3  E9 FFFFFF4F			jmp ChooseSpeed
 000001A8			SetArrowD:
 000001A8  FE C6			inc DH
 000001AA  88 35 0000015A R		mov arrowLoc, DH
 000001B0  E9 FFFFFF42			jmp ChooseSpeed
 000001B5			Up:
 000001B5  66| 5A			pop DX
 000001B7  80 FE 02			cmp DH, 2
 000001BA  75 0C			jne SetArrowU
 000001BC  C6 05 0000015A R		mov arrowLoc, 5
	   05
 000001C3  E9 FFFFFF2F			jmp ChooseSpeed
 000001C8			SetArrowU:
 000001C8  FE CE			dec DH
 000001CA  88 35 0000015A R		mov arrowLoc, DH
 000001D0  E9 FFFFFF22			jmp ChooseSpeed
 000001D5			SetSpeed:
 000001D5  E8 00000000 E		call Clrscr
 000001DA  66| 5A			pop DX
 000001DC  80 FE 02			cmp DH, 2
 000001DF  74 28			je Sort
 000001E1  C7 05 00000167 R		mov speed, 500
	   000001F4
 000001EB  80 FE 03			cmp DH, 3
 000001EE  74 19			je Sort
 000001F0  C7 05 00000167 R		mov speed, 250
	   000000FA
 000001FA  80 FE 04			cmp DH, 4
 000001FD  74 0A			je Sort
 000001FF  C7 05 00000167 R		mov speed, 100
	   00000064
 00000209			ChooseSpeed ENDP

				; Displays the unsorted array, sorts it based on what "algorithm" is set to, and displays the sorted array.
 00000209			Sort PROC
 00000209  E8 00000089		call CreateArray
 0000020E  BA 00000032 R	mov EDX, OFFSET message1
 00000213  E8 00000000 E	call WriteString
 00000218  E8 000001CC		call PrintArray
 0000021D  B2 00		mov DL, 0
 0000021F  B6 02		mov DH, 2
 00000221  E8 00000000 E	call Gotoxy
 00000226  BA 00000056 R	mov EDX, OFFSET prompt1
 0000022B  E8 00000000 E	call WriteString
 00000230  E8 00000086		call NoPress
 00000235  E8 00000000 E	call Clrscr
 0000023A  83 3D 00000163 R	cmp algorithm, 1
	   01
 00000241  75 07		jne FirstSkip
 00000243  E8 00000085		call InsertionSort
 00000248  EB 15		jmp Done
 0000024A			FirstSkip:
 0000024A  83 3D 00000163 R		cmp algorithm, 2
	   02
 00000251  75 07			jne SecondSkip
 00000253  E8 000000DA			call BubbleSort
 00000258  EB 05			jmp Done
 0000025A			SecondSkip:
 0000025A  E8 00000126			call SelectionSort
 0000025F			Done:
 0000025F  E8 00000000 E		call Clrscr
 00000264  BA 00000092 R		mov EDX, OFFSET message2
 00000269  E8 00000000 E		call WriteString
 0000026E  E8 00000176			call PrintArray
 00000273  B2 00			mov DL, 0
 00000275  B6 02			mov DH, 2
 00000277  E8 00000000 E		call Gotoxy
 0000027C  BA 00000072 R		mov EDX, OFFSET prompt2
 00000281  E8 00000000 E		call WriteString
 00000286  E8 00000030			call NoPress
 0000028B  E8 00000000 E		call Clrscr
					exit
 00000297			Sort ENDP

				; Generates random values for an array of size 50.
 00000297			CreateArray PROC
 00000297  BE 00000000		mov ESI, 0
 0000029C  B9 00000032		mov ECX, 50
 000002A1  E8 00000000 E	call Randomize
 000002A6			Fill:
 000002A6  B8 00000021			mov EAX, 33
 000002AB  E8 00000000 E		call RandomRange
 000002B0  40				inc EAX
 000002B1  88 86 00000000 R		mov array[ESI], AL
 000002B7  46				inc ESI
 000002B8  E2 EC			loop Fill
 000002BA  C3			ret
 000002BB			CreateArray ENDP

				; Procedure that mimics WaitMsg (but press any key instead of ENTER).
 000002BB			NoPress PROC
 000002BB  B8 00000032		mov EAX, 50
 000002C0  E8 00000000 E	call Delay
 000002C5  E8 00000000 E	call ReadKey
 000002CA  74 EF		jz NoPress
 000002CC  C3			ret
 000002CD			NoPress ENDP

				; Sorts the array using a less efficient version of Insertion Sort.
 000002CD			InsertionSort PROC
 000002CD  BE 00000032		mov ESI, SIZEOF array
 000002D2  4E			dec ESI
 000002D3  BF FFFFFFFF		mov EDI, -1 ; Set to -1 instead of 0 to utilize overflow as EDI is incremented before anything else.
 000002D8			Check:
 000002D8  47				inc EDI
 000002D9  8A 9E 00000000 R		mov BL, array[ESI]
 000002DF  3B FE			cmp EDI, ESI
 000002E1  74 14			je Done
 000002E3  3B 3D 0000015F R		cmp EDI, partition ; partition is the partition between sorted and unsorted.
 000002E9  74 0D			je ShiftArray
 000002EB  8A 87 00000000 R		mov AL, array[EDI]
 000002F1  38 D8			cmp AL, BL
 000002F3  77 03			ja ShiftArray
 000002F5  EB E1			jmp Check
 000002F7			Done:
 000002F7  C3				ret
 000002F8			InsertionSort ENDP

				; Shifts the contents of the array by one right until the location specified EDI. The location is filled with the contents of BL.
 000002F8			ShiftArray PROC
 000002F8  BE 00000032		mov ESI, SIZEOF array
 000002FD			Shift:
 000002FD  3B F7			cmp ESI, EDI
 000002FF  76 0F			jbe Fill
 00000301  4E				dec ESI
 00000302  8A 86 00000000 R		mov AL, array[ESI]
 00000308  88 86 00000001 R		mov array[ESI + 1], AL
 0000030E  EB ED			jmp Shift
 00000310			Fill:
 00000310  88 9F 00000000 R		mov array[EDI], BL
 00000316  FF 05 0000015F R		inc partition
 0000031C  E8 00000000 E		call Clrscr
 00000321  E8 000000C3			call PrintArray
 00000326  A1 00000167 R		mov EAX, speed
 0000032B  E8 00000000 E		call Delay
 00000330  EB 9B			jmp InsertionSort
 00000332			ShiftArray ENDP

				; Sorts the array using Bubble Sort.
 00000332			BubbleSort PROC
 00000332  B9 00000032		mov ECX, SIZEOF array
 00000337  49			dec ECX
 00000338			Pass:
 00000338  BE 00000000			mov ESI, 0
 0000033D  BF 00000001			mov EDI, 1
 00000342				Check:
 00000342  8A 86 00000000 R			mov AL, array[ESI]
 00000348  8A 9F 00000000 R			mov BL, array[EDI]
 0000034E  38 D8				cmp AL, BL
 00000350  77 08				ja Swap
 00000352  3B F9				cmp EDI, ECX
 00000354  77 2C				ja Next
 00000356  46					inc ESI
 00000357  47					inc EDI
 00000358  EB E8				jmp Check
 0000035A				Swap:
 0000035A  88 9E 00000000 R			mov array[ESI], BL
 00000360  88 87 00000000 R			mov array[EDI], AL
 00000366  46					inc ESI
 00000367  47					inc EDI
 00000368  51					push ECX
 00000369  56					push ESI
 0000036A  E8 00000000 E			call Clrscr
 0000036F  E8 00000075				call PrintArray
 00000374  A1 00000167 R			mov EAX, speed
 00000379  E8 00000000 E			call Delay
 0000037E  5E					pop ESI
 0000037F  59					pop ECX
 00000380  EB C0				jmp Check
 00000382				Next:
 00000382  E2 B4				loop Pass
 00000384  C3				ret
 00000385			BubbleSort ENDP

				; Sorts the array using Selection Sort.
 00000385			SelectionSort PROC
 00000385  BE 00000000		mov ESI, 0
 0000038A			Selections:
 0000038A  89 35 0000015B R		mov index, ESI
 00000390  8B FE			mov EDI, ESI
 00000392  47				inc EDI
 00000393  8A 86 00000000 R		mov AL, array[ESI]
 00000399				Check:
 00000399  83 FF 32				cmp EDI, SIZEOF array
 0000039C  74 19				je Swap
 0000039E  77 48				ja Done
 000003A0  8A 9F 00000000 R			mov BL, array[EDI]
 000003A6  38 D8				cmp AL, BL
 000003A8  77 03				ja NewMin
 000003AA					Continue:
 000003AA  47						inc EDI
 000003AB  EB EC					jmp Check
 000003AD				NewMin:
 000003AD  89 3D 0000015B R			mov index, EDI
 000003B3  8A C3				mov AL, BL
 000003B5  EB F3				jmp Continue
 000003B7				Swap:
 000003B7  8B 3D 0000015B R			mov EDI, index
 000003BD  8A 9E 00000000 R			mov BL, array[ESI]
 000003C3  88 86 00000000 R			mov array[ESI], AL
 000003C9  88 9F 00000000 R			mov array[EDI], BL
 000003CF  46					inc ESI
 000003D0  56					push ESI
 000003D1  E8 00000000 E			call Clrscr
 000003D6  E8 0000000E				call PrintArray
 000003DB  A1 00000167 R			mov EAX, speed
 000003E0  E8 00000000 E			call Delay
 000003E5  5E					pop ESI
 000003E6  EB A2				jmp Selections
 000003E8				Done:
 000003E8  C3					ret
 000003E9			SelectionSort ENDP

				; Prints out the contents of the array in the form of vertical bars.
 000003E9			PrintArray PROC
 000003E9  BE 00000000		mov ESI, 0
 000003EE  B2 FE		mov DL, -2
 000003F0  B0 DB		mov AL, 219
 000003F2  B9 00000032		mov ECX, SIZEOF array
 000003F7			print:
 000003F7  80 C2 02			add DL, 2
 000003FA  B6 24			mov DH, 36
 000003FC  51				push ECX
 000003FD  0F B6 8E			movzx ECX, array[ESI]
	   00000000 R
 00000404				bar:
 00000404  E8 00000000 E			call Gotoxy
 00000409  E8 00000000 E			call WriteChar
 0000040E  FE CE				dec DH
 00000410  E2 F2				loop bar
 00000412  46				inc ESI
 00000413  59				pop ECX
 00000414  E2 E1			loop print
 00000416  C3			ret
 00000417			PrintArray ENDP

				END Main
Microsoft (R) Macro Assembler Version 6.15.8803		    10/25/24 11:08:15
C:\Users\jclar\MEGA\School\CS2290\Labs\Assignment 9\Part 5.asm  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
INPUT_RECORD . . . . . . . . . .	 00000014
  eventType  . . . . . . . . . .	 00000000	 Word
  event  . . . . . . . . . . . .	 00000004	  00000010
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000016B DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000417 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

BubbleSort . . . . . . . . . . .	P Near	 00000332 _TEXT	Length= 00000053 Public STDCALL
  Pass . . . . . . . . . . . . .	L Near	 00000338 _TEXT	
  Check  . . . . . . . . . . . .	L Near	 00000342 _TEXT	
  Swap . . . . . . . . . . . . .	L Near	 0000035A _TEXT	
  Next . . . . . . . . . . . . .	L Near	 00000382 _TEXT	
ChooseSpeed  . . . . . . . . . .	P Near	 000000F7 _TEXT	Length= 00000112 Public STDCALL
  Cursor . . . . . . . . . . . .	L Near	 00000166 _TEXT	
  Down . . . . . . . . . . . . .	L Near	 00000195 _TEXT	
  SetArrowD  . . . . . . . . . .	L Near	 000001A8 _TEXT	
  Up . . . . . . . . . . . . . .	L Near	 000001B5 _TEXT	
  SetArrowU  . . . . . . . . . .	L Near	 000001C8 _TEXT	
  SetSpeed . . . . . . . . . . .	L Near	 000001D5 _TEXT	
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateArray  . . . . . . . . . .	P Near	 00000297 _TEXT	Length= 00000024 Public STDCALL
  Fill . . . . . . . . . . . . .	L Near	 000002A6 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandtail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InsertionSort  . . . . . . . . .	P Near	 000002CD _TEXT	Length= 0000002B Public STDCALL
  Check  . . . . . . . . . . . .	L Near	 000002D8 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 000002F7 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000F7 Public STDCALL
  Cursor . . . . . . . . . . . .	L Near	 0000005C _TEXT	
  Down . . . . . . . . . . . . .	L Near	 0000008B _TEXT	
  SetArrowD  . . . . . . . . . .	L Near	 0000009E _TEXT	
  Up . . . . . . . . . . . . . .	L Near	 000000AB _TEXT	
  SetArrowU  . . . . . . . . . .	L Near	 000000BE _TEXT	
  SetAlgorithm . . . . . . . . .	L Near	 000000CB _TEXT	
NoPress  . . . . . . . . . . . .	P Near	 000002BB _TEXT	Length= 00000012 Public STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintArray . . . . . . . . . . .	P Near	 000003E9 _TEXT	Length= 0000002E Public STDCALL
  print  . . . . . . . . . . . .	L Near	 000003F7 _TEXT	
  bar  . . . . . . . . . . . . .	L Near	 00000404 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SelectionSort  . . . . . . . . .	P Near	 00000385 _TEXT	Length= 00000064 Public STDCALL
  Selections . . . . . . . . . .	L Near	 0000038A _TEXT	
  Check  . . . . . . . . . . . .	L Near	 00000399 _TEXT	
  Continue . . . . . . . . . . .	L Near	 000003AA _TEXT	
  NewMin . . . . . . . . . . . .	L Near	 000003AD _TEXT	
  Swap . . . . . . . . . . . . .	L Near	 000003B7 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 000003E8 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShiftArray . . . . . . . . . . .	P Near	 000002F8 _TEXT	Length= 0000003A Public STDCALL
  Shift  . . . . . . . . . . . .	L Near	 000002FD _TEXT	
  Fill . . . . . . . . . . . . .	L Near	 00000310 _TEXT	
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sort . . . . . . . . . . . . . .	P Near	 00000209 _TEXT	Length= 0000008E Public STDCALL
  FirstSkip  . . . . . . . . . .	L Near	 0000024A _TEXT	
  SecondSkip . . . . . . . . . .	L Near	 0000025A _TEXT	
  Done . . . . . . . . . . . . .	L Near	 0000025F _TEXT	
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LIGHT_BLUE . . . . . . . . . . .	Number	 00000009h   
LIGHT_CYAN . . . . . . . . . . .	Number	 0000000Bh   
LIGHT_GRAY . . . . . . . . . . .	Number	 00000007h   
LIGHT_GREEN  . . . . . . . . . .	Number	 0000000Ah   
LIGHT_MAGENTA  . . . . . . . . .	Number	 0000000Dh   
LIGHT_RED  . . . . . . . . . . .	Number	 0000000Ch   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
algorithm  . . . . . . . . . . .	DWord	 00000163 _DATA	
array  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
arrowLoc . . . . . . . . . . . .	Byte	 0000015A _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bubble . . . . . . . . . . . . .	Byte	 000000EF _DATA	
choiceSort . . . . . . . . . . .	Byte	 000000B4 _DATA	
choiceSpeed  . . . . . . . . . .	Byte	 0000010A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extreme  . . . . . . . . . . . .	Byte	 00000154 _DATA	
fast . . . . . . . . . . . . . .	Byte	 0000014E _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
index  . . . . . . . . . . . . .	DWord	 0000015B _DATA	
insertion  . . . . . . . . . . .	Byte	 000000E0 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
message1 . . . . . . . . . . . .	Byte	 00000032 _DATA	
message2 . . . . . . . . . . . .	Byte	 00000092 _DATA	
normal . . . . . . . . . . . . .	Byte	 00000148 _DATA	
partition  . . . . . . . . . . .	DWord	 0000015F _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000056 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 00000072 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
selection  . . . . . . . . . . .	Byte	 000000FB _DATA	
slow . . . . . . . . . . . . . .	Byte	 00000142 _DATA	
speed  . . . . . . . . . . . . .	DWord	 00000167 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
