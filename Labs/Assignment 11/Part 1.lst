Microsoft (R) Macro Assembler Version 6.15.8803		    12/05/22 15:05:00
C:\Users\jclar\MEGA\School\CS2290\Labs\Assignment 11\Part 1.asm	 Page 1 - 1


				; Author: Jeremey Larter
				; Lab Assignment #11 (Procedure Parameters)
				; Purpose: To demonstrate procedure parameters using the push and pop operations as well as the ESP and EBP registers.
				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc		; (4/6/03)
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
				; Memory allocations.
 00000000 57 68 69 63 68	prompt		BYTE	"Which procedure do you wish to see?", 0
	   20 70 72 6F 63
	   65 64 75 72 65
	   20 64 6F 20 79
	   6F 75 20 77 69
	   73 68 20 74 6F
	   20 73 65 65 3F
	   00
 00000024 61 64 64 54 77	program1	BYTE	"addTwoV1 Procedure", 0
	   6F 56 31 20 50
	   72 6F 63 65 64
	   75 72 65 00
 00000037 76 61 6C 75 65	value1		BYTE	"value 1 : ", 0
	   20 31 20 3A 20
	   00
 00000042 76 61 6C 75 65	value2		BYTE	"value 2 : ", 0
	   20 32 20 3A 20
	   00
 0000004D 65 61 78 20 20	eaxValue	BYTE	"eax     : ", 0
	   20 20 20 3A 20
	   00
 00000058 61 64 64 54 77	program2	BYTE	"addTwoV2 Procedure", 0
	   6F 56 32 20 50
	   72 6F 63 65 64
	   75 72 65 00
 0000006B 72 65 73 75 6C	resultMes	BYTE	"result  : ", 0
	   74 20 20 3A 20
	   00
 00000076 00000000		result		DWORD	?
 0000007A 6C 6F 61 64 41	program3	BYTE	"loadArray Procedure", 0
	   72 72 61 79 20
	   50 72 6F 63 65
	   64 75 72 65 00
 0000008E 56 61 6C 75 65	loadedVal	BYTE	"Value to be loaded    : ", 0
	   20 74 6F 20 62
	   65 20 6C 6F 61
	   64 65 64 20 20
	   20 20 3A 20 00
 000000A7 4C 65 6E 67 74	arrayLen	BYTE	"Length of the array   : ", 0
	   68 20 6F 66 20
	   74 68 65 20 61
	   72 72 61 79 20
	   20 20 3A 20 00
 000000C0 4C 69 73 74 20	listBefore	BYTE	"List before: ", 0
	   62 65 66 6F 72
	   65 3A 20 00
 000000CE 4C 69 73 74 20	listAfter	BYTE	"List after : ", 0
	   61 66 74 65 72
	   20 3A 20 00
 000000DC 6C 6F 61 64 41	program4	BYTE	"loadArrayRange Procedure", 0
	   72 72 61 79 52
	   61 6E 67 65 20
	   50 72 6F 63 65
	   64 75 72 65 00
 000000F5 53 74 61 72 74	startLoc	BYTE	"Start location        : ", 0
	   20 6C 6F 63 61
	   74 69 6F 6E 20
	   20 20 20 20 20
	   20 20 3A 20 00
 0000010E 45 6E 64 20 6C	endLoc		BYTE	"End location          : ", 0
	   6F 63 61 74 69
	   6F 6E 20 20 20
	   20 20 20 20 20
	   20 20 3A 20 00
 00000127 6C 6F 61 64 41	program5	BYTE	"loadArrayGeneral Procedure", 0
	   72 72 61 79 47
	   65 6E 65 72 61
	   6C 20 50 72 6F
	   63 65 64 75 72
	   65 00
 00000142 54 79 70 65 20	arrayType	BYTE	"Type of the array     : ", 0
	   6F 66 20 74 68
	   65 20 61 72 72
	   61 79 20 20 20
	   20 20 3A 20 00
 0000015B 44 75 6D 70 20	offsetDump	BYTE	"Dump of offset ", 0
	   6F 66 20 6F 66
	   66 73 65 74 20
	   00
 0000016B  0000001A [		dashes		BYTE	26 dup('-'), 0
	    2D
	   ] 00
 00000186 02			arrowPos	BYTE	2
 00000187  0000000A [		list		DWORD	10 dup(0)
	    00000000
	   ]

 00000000			.code
				; Contains the menu for selecting a procedure.
 00000000			Main PROC
 00000000  E8 00000000 E		call Clrscr
 00000005  BA 00000000 R		mov EDX, OFFSET prompt
 0000000A  E8 00000000 E		call WriteString
 0000000F  8A 35 00000186 R		mov DH, arrowPos
 00000015  B2 00			mov DL, 0
 00000017  E8 00000000 E		call Gotoxy
 0000001C  B0 3E			mov AL, 62 ; ASCII code of right arrow.
 0000001E  E8 00000000 E		call WriteChar
 00000023  B6 02			mov DH, 2
 00000025  B2 04			mov DL, 4
 00000027  E8 00000000 E		call Gotoxy
 0000002C  BA 00000024 R		mov EDX, OFFSET program1
 00000031  E8 00000000 E		call WriteString
 00000036  B6 03			mov DH, 3
 00000038  B2 04			mov DL, 4
 0000003A  E8 00000000 E		call Gotoxy
 0000003F  BA 00000058 R		mov EDX, OFFSET program2
 00000044  E8 00000000 E		call WriteString
 00000049  B6 04			mov DH, 4
 0000004B  B2 04			mov DL, 4
 0000004D  E8 00000000 E		call Gotoxy
 00000052  BA 0000007A R		mov EDX, OFFSET program3
 00000057  E8 00000000 E		call WriteString
 0000005C  B6 05			mov DH, 5
 0000005E  B2 04			mov DL, 4
 00000060  E8 00000000 E		call Gotoxy
 00000065  BA 000000DC R		mov EDX, OFFSET program4
 0000006A  E8 00000000 E		call WriteString
 0000006F  B6 06			mov DH, 6
 00000071  B2 04			mov DL, 4
 00000073  E8 00000000 E		call Gotoxy
 00000078  BA 00000127 R		mov EDX, OFFSET program5
 0000007D  E8 00000000 E		call WriteString
 00000082			Cursor:
 00000082  8A 35 00000186 R		mov DH, arrowPos
 00000088  B2 00			mov DL, 0
 0000008A  E8 00000000 E		call Gotoxy
 0000008F  B8 00000032			mov EAX, 50
 00000094  E8 00000000 E		call Delay
 00000099  52				push EDX
 0000009A  E8 00000000 E		call ReadKey
 0000009F  5A				pop EDX
 000000A0  80 FC 50			cmp AH, 50h ; Virtual-scan code for DOWN key.
 000000A3  74 0C			je Down
 000000A5  80 FC 48			cmp AH, 48h ; Virtual-scan code for UP key.
 000000A8  74 25			je Up
 000000AA  80 FC 1C			cmp AH, 1Ch ; Virtual-scan code for ENTER key.
 000000AD  74 3E			je GoToProc
 000000AF  EB D1			jmp Cursor
 000000B1			Down:
 000000B1  80 FE 06			cmp DH, 6
 000000B4  75 0C			jne SetArrowD
 000000B6  C6 05 00000186 R		mov arrowPos, 2
	   02
 000000BD  E9 FFFFFF3E			jmp Main
 000000C2			SetArrowD:
 000000C2  FE C6			inc DH
 000000C4  88 35 00000186 R		mov arrowPos, DH
 000000CA  E9 FFFFFF31			jmp Main
 000000CF			Up:
 000000CF  80 FE 02			cmp DH, 2
 000000D2  75 0C			jne SetArrowU
 000000D4  C6 05 00000186 R		mov arrowPos, 6
	   06
 000000DB  E9 FFFFFF20			jmp Main
 000000E0			SetArrowU:
 000000E0  FE CE			dec DH
 000000E2  88 35 00000186 R		mov arrowPos, DH
 000000E8  E9 FFFFFF13			jmp Main
 000000ED			GoToProc:
 000000ED  E8 00000000 E		call Clrscr
 000000F2  80 FE 02			cmp DH, 2
 000000F5  75 13			jne FirstSkip
 000000F7  6A 07			push 7 ; y
 000000F9  6A 0C			push 12 ; x
 000000FB  E8 00000082			call addTwoV1
 00000100  E8 00000088			call printSumV1
 00000105  83 C4 08			add ESP, 8
 00000108  EB 71			jmp Done
 0000010A			FirstSkip:
 0000010A  80 FE 03			cmp DH, 3
 0000010D  75 18			jne SecondSkip
 0000010F  68 00000076 R		push OFFSET result ; z
 00000114  6A 05			push 5 ; y
 00000116  6A 09			push 9 ; x
 00000118  E8 000000CA			call addTwoV2
 0000011D  E8 000000D9			call printSumV2
 00000122  83 C4 0C			add ESP, 12
 00000125  EB 54			jmp Done
 00000127			SecondSkip:
 00000127  80 FE 04			cmp DH, 4
 0000012A  75 18			jne ThirdSkip
 0000012C  6A 04			push 4 ; z
 0000012E  6A 0A			push 10 ; y
 00000130  68 00000187 R		push OFFSET list ; x
 00000135  E8 00000120			call loadArray
 0000013A  E8 00000136			call printArray
 0000013F  83 C4 0C			add ESP, 12
 00000142  EB 37			jmp Done
 00000144			ThirdSkip:
 00000144  80 FE 05			cmp DH, 5
 00000147  75 1A			jne FourthSkip
 00000149  6A 09			push 9 ; w
 0000014B  6A 04			push 4 ; z
 0000014D  6A 02			push 2 ; y
 0000014F  68 00000187 R		push OFFSET list ; x
 00000154  E8 000001B7			call loadArrayRange
 00000159  E8 000001DB			call printArrayRange
 0000015E  83 C4 10			add ESP, 16
 00000161  EB 18			jmp Done
 00000163			FourthSkip:
 00000163  6A 07			push 7 ; w
 00000165  6A 02			push 2 ; z
 00000167  6A 0A			push 10 ; y
 00000169  68 00000187 R		push OFFSET list ; x
 0000016E  E8 0000027A			call loadArrayGeneral
 00000173  E8 000002BA			call printArrayGeneral
 00000178  83 C4 10			add ESP, 16
 0000017B			Done: 
					exit
 00000182			Main ENDP

				; Expects two parameters of type DWORD in the stack and returns the sum in the EAX register. Uses C calling convention.
 00000182			addTwoV1 PROC
 00000182  55				push EBP
 00000183  8B EC			mov EBP, ESP
 00000185  8B 45 08			mov EAX, [EBP + 8] ; x
 00000188  03 45 0C			add EAX, [EBP + 12] ; y
 0000018B  5D				pop EBP
 0000018C  C3				ret
 0000018D			addTwoV1 ENDP

				; Expects two parameters of type DWORD in the stack and prints out the sum of the two. Uses C calling convention.
 0000018D			printSumV1 PROC
 0000018D  55				push EBP
 0000018E  8B EC			mov EBP, ESP
 00000190  52				push EDX
 00000191  BA 00000024 R		mov EDX, OFFSET program1
 00000196  E8 00000000 E		call WriteString
 0000019B  E8 00000000 E		call Crlf
 000001A0  BA 00000037 R		mov EDX, OFFSET value1
 000001A5  E8 00000000 E		call WriteString
 000001AA  50				push EAX
 000001AB  8B 45 08			mov EAX, [EBP + 8]
 000001AE  E8 00000000 E		call WriteDec
 000001B3  E8 00000000 E		call Crlf
 000001B8  BA 00000042 R		mov EDX, OFFSET value2
 000001BD  E8 00000000 E		call WriteString
 000001C2  8B 45 0C			mov EAX, [EBP + 12]
 000001C5  E8 00000000 E		call WriteDec
 000001CA  E8 00000000 E		call Crlf
 000001CF  58				pop EAX
 000001D0  BA 0000004D R		mov EDX, OFFSET eaxValue
 000001D5  E8 00000000 E		call WriteString
 000001DA  E8 00000000 E		call WriteDec
 000001DF  E8 00000000 E		call Crlf
 000001E4  5A				pop EDX
 000001E5  5D				pop EBP
 000001E6  C3				ret
 000001E7			printSumV1 ENDP

				; Expects three parameters of type DWORD in the stack and returns the sum in the memory location of the third parameter. Uses STD calling convention.
 000001E7			addTwoV2 PROC
 000001E7  55				push EBP
 000001E8  8B EC			mov EBP, ESP
 000001EA  50				push EAX
 000001EB  53				push EBX
 000001EC  8B 45 08			mov EAX, [EBP + 8] ; x
 000001EF  03 45 0C			add EAX, [EBP + 12] ; y
 000001F2  8B 5D 10			mov EBX, [EBP + 16]
 000001F5  89 03			mov [EBX], EAX ; z
 000001F7  5B				pop EBX
 000001F8  58				pop EAX
 000001F9  5D				pop EBP
 000001FA  C3				ret
 000001FB			addTwoV2 ENDP

				; Expects three parameters of type 
 000001FB			printSumV2 PROC
 000001FB  55				push EBP
 000001FC  8B EC			mov EBP, ESP
 000001FE  52				push EDX
 000001FF  BA 00000058 R		mov EDX, OFFSET program2
 00000204  E8 00000000 E		call WriteString
 00000209  E8 00000000 E		call Crlf
 0000020E  BA 00000037 R		mov EDX, OFFSET value1
 00000213  E8 00000000 E		call WriteString
 00000218  50				push EAX
 00000219  8B 45 08			mov EAX, [EBP + 8]
 0000021C  E8 00000000 E		call WriteDec
 00000221  E8 00000000 E		call Crlf
 00000226  BA 00000042 R		mov EDX, OFFSET value2
 0000022B  E8 00000000 E		call WriteString
 00000230  8B 45 0C			mov EAX, [EBP + 12]
 00000233  E8 00000000 E		call WriteDec
 00000238  E8 00000000 E		call Crlf
 0000023D  BA 0000006B R		mov EDX, OFFSET resultMes
 00000242  E8 00000000 E		call WriteString
 00000247  A1 00000076 R		mov EAX, result
 0000024C  E8 00000000 E		call WriteDec
 00000251  E8 00000000 E		call Crlf
 00000256  58				pop EAX
 00000257  5A				pop EDX
 00000258  5D				pop EBP
 00000259  C3				ret
 0000025A			printSumV2 ENDP

				; Expects three parameters of type DWORD (array, imm32, imm32) and returns the modified array in the memory location of the first parameter. Uses C calling convention.
 0000025A			loadArray PROC
 0000025A  55				push EBP
 0000025B  8B EC			mov EBP, ESP
 0000025D  50				push EAX
 0000025E  8B 45 10			mov EAX, [EBP + 16] ; z
 00000261  56				push ESI
 00000262  8B 75 08			mov ESI, [EBP + 8] ; x
 00000265  51				push ECX
 00000266  8B 4D 0C			mov ECX, [EBP + 12] ; y
 00000269			Fill:
 00000269  89 06			mov [ESI], EAX
 0000026B  83 C6 04			add ESI, 4
 0000026E  E2 F9			loop Fill
 00000270  59				pop ECX
 00000271  5E				pop ESI
 00000272  58				pop EAX
 00000273  5D				pop EBP
 00000274  C3				ret
 00000275			loadArray ENDP

				; Expects three parameters of type DWORD (array, imm32, imm32) and prints out the array. Uses C calling convention.
 00000275			printArray PROC
 00000275  55				push EBP
 00000276  8B EC			mov EBP, ESP
 00000278  52				push EDX
 00000279  BA 0000007A R		mov EDX, OFFSET program3
 0000027E  E8 00000000 E		call WriteString
 00000283  E8 00000000 E		call Crlf
 00000288  BA 0000008E R		mov EDX, OFFSET loadedVal
 0000028D  E8 00000000 E		call WriteString
 00000292  50				push EAX
 00000293  8B 45 10			mov EAX, [EBP + 16]
 00000296  E8 00000000 E		call WriteDec
 0000029B  E8 00000000 E		call Crlf
 000002A0  BA 000000A7 R		mov EDX, OFFSET arrayLen
 000002A5  E8 00000000 E		call WriteString
 000002AA  8B 45 0C			mov EAX, [EBP + 12]
 000002AD  E8 00000000 E		call WriteDec
 000002B2  E8 00000000 E		call Crlf
 000002B7  E8 00000000 E		call Crlf
 000002BC  BA 000000C0 R		mov EDX, OFFSET listBefore
 000002C1  E8 00000000 E		call WriteString
 000002C6  56				push ESI
 000002C7  8B 75 08			mov ESI, [EBP + 8] ; x
 000002CA  51				push ECX
 000002CB  8B C8			mov ECX, EAX ; y
 000002CD			Before:
 000002CD  B8 00000000			mov EAX, 0
 000002D2  E8 00000000 E		call WriteDec
 000002D7  B0 20			mov AL, 32
 000002D9  E8 00000000 E		call WriteChar
 000002DE  E2 ED			loop Before
 000002E0  E8 00000000 E		call Crlf
 000002E5  BA 000000CE R		mov EDX, OFFSET listAfter
 000002EA  E8 00000000 E		call WriteString
 000002EF  8B 4D 0C			mov ECX, [EBP + 12]
 000002F2			After:
 000002F2  8B 06			mov EAX, [ESI]
 000002F4  E8 00000000 E		call WriteDec
 000002F9  B0 20			mov AL, 32
 000002FB  E8 00000000 E		call WriteChar
 00000300  83 C6 04			add ESI, 4
 00000303  E2 ED			loop After
 00000305  E8 00000000 E		call Crlf
 0000030A  59				pop ECX
 0000030B  5E				pop ESI
 0000030C  58				pop EAX
 0000030D  5A				pop EDX
 0000030E  5D				pop EBP
 0000030F  C3				ret
 00000310			printArray ENDP

				; Expects four parameters of type DWORD (array, imm32, imm32, imm32) and returns the modified array in the memory location of the first parameter. Uses C calling convention.
 00000310			loadArrayRange PROC
 00000310  55				push EBP
 00000311  8B EC			mov EBP, ESP
 00000313  50				push EAX
 00000314  8B 45 0C			mov EAX, [EBP + 12] ; y
 00000317  56				push ESI
 00000318  8B 75 08			mov ESI, [EBP + 8] ; x
 0000031B  53				push EBX
 0000031C  8B 5D 10			mov EBX, [EBP + 16] ; z
 0000031F  C1 E3 02			shl EBX, 2 ; Multiply EBX by 4
 00000322  03 F3			add ESI, EBX
 00000324  51				push ECX
 00000325  8B 4D 14			mov ECX, [EBP + 20] ; w
 00000328  2B 4D 10			sub ECX, [EBP + 16] ; z
 0000032B  41				inc ECX
 0000032C			Fill:
 0000032C  89 06			mov [ESI], EAX
 0000032E  83 C6 04			add ESI, 4
 00000331  E2 F9			loop Fill
 00000333  59				pop ECX
 00000334  5B				pop EBX
 00000335  5E				pop ESI
 00000336  58				pop EAX
 00000337  5D				pop EBP
 00000338  C3				ret
 00000339			loadArrayRange ENDP

				; Expects four parameters of type DWORD (array, imm32, imm32, imm32) and prints out the array. Uses C calling convention.
 00000339			printArrayRange PROC
 00000339  55				push EBP
 0000033A  8B EC			mov EBP, ESP
 0000033C  52				push EDX
 0000033D  BA 000000DC R		mov EDX, OFFSET program4
 00000342  E8 00000000 E		call WriteString
 00000347  E8 00000000 E		call Crlf
 0000034C  BA 0000008E R		mov EDX, OFFSET loadedVal
 00000351  E8 00000000 E		call WriteString
 00000356  50				push EAX
 00000357  8B 45 0C			mov EAX, [EBP + 12]
 0000035A  E8 00000000 E		call WriteDec
 0000035F  E8 00000000 E		call Crlf
 00000364  BA 000000F5 R		mov EDX, OFFSET startLoc
 00000369  E8 00000000 E		call WriteString
 0000036E  8B 45 10			mov EAX, [EBP + 16]
 00000371  E8 00000000 E		call WriteDec
 00000376  E8 00000000 E		call Crlf
 0000037B  BA 0000010E R		mov EDX, OFFSET endLoc
 00000380  E8 00000000 E		call WriteString
 00000385  8B 45 14			mov EAX, [EBP + 20]
 00000388  E8 00000000 E		call WriteDec
 0000038D  E8 00000000 E		call Crlf
 00000392  E8 00000000 E		call Crlf
 00000397  BA 000000C0 R		mov EDX, OFFSET listBefore
 0000039C  E8 00000000 E		call WriteString
 000003A1  51				push ECX
 000003A2  8B C8			mov ECX, EAX ; w
 000003A4  41				inc ECX
 000003A5			Before:
 000003A5  B8 00000000			mov EAX, 0
 000003AA  E8 00000000 E		call WriteDec
 000003AF  B0 20			mov AL, 32
 000003B1  E8 00000000 E		call WriteChar
 000003B6  E2 ED			loop Before
 000003B8  E8 00000000 E		call Crlf
 000003BD  BA 000000CE R		mov EDX, OFFSET listAfter
 000003C2  E8 00000000 E		call WriteString
 000003C7  56				push ESI
 000003C8  8B 75 08			mov ESI, [EBP + 8] ; x
 000003CB  8B 4D 14			mov ECX, [EBP + 20]
 000003CE  41				inc ECX
 000003CF			After:
 000003CF  8B 06			mov EAX, [ESI]
 000003D1  E8 00000000 E		call WriteDec
 000003D6  B0 20			mov AL, 32
 000003D8  E8 00000000 E		call WriteChar
 000003DD  83 C6 04			add ESI, 4
 000003E0  E2 ED			loop After
 000003E2  E8 00000000 E		call Crlf
 000003E7  5E				pop ESI
 000003E8  59				pop ECX
 000003E9  58				pop EAX
 000003EA  5A				pop EDX
 000003EB  5D				pop EBP
 000003EC  C3				ret
 000003ED			printArrayRange ENDP

				; Expects four parameters of type DWORD (array, imm32, imm32, imm32) and returns the modified array in the memory location of the first parameter. Uses C calling convention.
 000003ED			loadArrayGeneral PROC
 000003ED  55				push EBP
 000003EE  8B EC			mov EBP, ESP
 000003F0  53				push EBX
 000003F1  8B 5D 10			mov EBX, [EBP + 16] ; z
 000003F4  83 FB 01			cmp EBX, 1
 000003F7  75 02			jne WordArray
 000003F9  EB 0C			jmp Done
 000003FB			WordArray:
 000003FB  83 FB 02			cmp EBX, 2
 000003FE  75 02			jne DwordArray
 00000400  EB 05			jmp Done
 00000402			DwordArray:
 00000402  BB 00000004			mov EBX, 4
 00000407			Done:
 00000407  50				push EAX
 00000408  8B 45 14			mov EAX, [EBP + 20] ; w
 0000040B  56				push ESI
 0000040C  8B 75 08			mov ESI, [EBP + 8] ; x
 0000040F  51				push ECX
 00000410  8B 4D 0C			mov ECX, [EBP + 12] ; y
 00000413			Fill:
 00000413  83 FB 01			cmp EBX, 1
 00000416  75 04			jne WordEntry
 00000418  88 06			mov [ESI], AL
 0000041A  EB 0C			jmp Continue
 0000041C			WordEntry:
 0000041C  83 FB 02			cmp EBX, 2
 0000041F  75 05			jne DwordEntry
 00000421  66| 89 06			mov [ESI], AX
 00000424  EB 02			jmp Continue
 00000426			DwordEntry:
 00000426  89 06			mov [ESI], EAX
 00000428			Continue:
 00000428  03 F3			add ESI, EBX
 0000042A  E2 E7			loop Fill
 0000042C  59				pop ECX
 0000042D  5E				pop ESI
 0000042E  58				pop EAX
 0000042F  5B				pop EBX
 00000430  5D				pop EBP
 00000431  C3				ret
 00000432			loadArrayGeneral ENDP

 00000432			printArrayGeneral PROC
 00000432  55				push EBP
 00000433  8B EC			mov EBP, ESP
 00000435  52				push EDX
 00000436  BA 00000127 R		mov EDX, OFFSET program5
 0000043B  E8 00000000 E		call WriteString
 00000440  E8 00000000 E		call Crlf
 00000445  BA 0000008E R		mov EDX, OFFSET loadedVal
 0000044A  E8 00000000 E		call WriteString
 0000044F  50				push EAX
 00000450  8B 45 14			mov EAX, [EBP + 20]
 00000453  E8 00000000 E		call WriteDec
 00000458  E8 00000000 E		call Crlf
 0000045D  BA 000000A7 R		mov EDX, OFFSET arrayLen
 00000462  E8 00000000 E		call WriteString
 00000467  8B 45 0C			mov EAX, [EBP + 12]
 0000046A  E8 00000000 E		call WriteDec
 0000046F  E8 00000000 E		call Crlf
 00000474  BA 00000142 R		mov EDX, OFFSET arrayType
 00000479  E8 00000000 E		call WriteString
 0000047E  8B 45 10			mov EAX, [EBP + 16]
 00000481  E8 00000000 E		call WriteDec
 00000486  E8 00000000 E		call Crlf
 0000048B  E8 00000000 E		call Crlf
 00000490  BA 000000C0 R		mov EDX, OFFSET listBefore
 00000495  E8 00000000 E		call WriteString
 0000049A  E8 00000000 E		call Crlf
 0000049F  E8 00000000 E		call Crlf
 000004A4  BA 0000015B R		mov EDX, OFFSET offsetDump
 000004A9  E8 00000000 E		call WriteString
 000004AE  8B 45 08			mov EAX, [EBP + 8]
 000004B1  E8 00000000 E		call WriteDec
 000004B6  E8 00000000 E		call Crlf
 000004BB  BA 0000016B R		mov EDX, OFFSET dashes
 000004C0  E8 00000000 E		call WriteString
 000004C5  E8 00000000 E		call Crlf
 000004CA  53				push EBX
 000004CB  51				push ECX
 000004CC  8B 4D 0C			mov ECX, [EBP + 12]
 000004CF			Before:
 000004CF  B8 00000000			mov EAX, 0
 000004D4  BB 00000002			mov EBX, 2
 000004D9  E8 00000000 E		call WriteHexB
 000004DE  B0 20			mov AL, 32
 000004E0  E8 00000000 E		call WriteChar
 000004E5  E2 E8			loop Before	
 000004E7  E8 00000000 E		call Crlf
 000004EC  E8 00000000 E		call Crlf
 000004F1  BA 000000CE R		mov EDX, OFFSET listAfter
 000004F6  E8 00000000 E		call WriteString
 000004FB  E8 00000000 E		call Crlf
 00000500  E8 00000000 E		call Crlf
 00000505  BA 0000015B R		mov EDX, OFFSET offsetDump
 0000050A  E8 00000000 E		call WriteString
 0000050F  8B 45 08			mov EAX, [EBP + 8]
 00000512  E8 00000000 E		call WriteDec
 00000517  E8 00000000 E		call Crlf
 0000051C  BA 0000016B R		mov EDX, OFFSET dashes
 00000521  E8 00000000 E		call WriteString
 00000526  E8 00000000 E		call Crlf
 0000052B  8B 5D 10			mov EBX, [EBP + 16] ; z
 0000052E  83 FB 01			cmp EBX, 1
 00000531  75 02			jne WordArray
 00000533  EB 0C			jmp Done
 00000535			WordArray:
 00000535  83 FB 02			cmp EBX, 2
 00000538  75 02			jne DwordArray
 0000053A  EB 05			jmp Done
 0000053C			DwordArray:
 0000053C  BB 00000004			mov EBX, 4
 00000541			Done:
 00000541  56				push ESI
 00000542  8B 75 08			mov ESI, [EBP + 8]
 00000545  8B 4D 0C			mov ECX, [EBP + 12]
 00000548			After:
 00000548  83 FB 04			cmp EBX, 4
 0000054B  75 04			jne WordElement
 0000054D  8B 06			mov EAX, [ESI]
 0000054F  EB 0D			jmp Continue
 00000551			WordElement:
 00000551  83 FB 02			cmp EBX, 2
 00000554  75 05			jne ByteElement
 00000556  0F BF 06			movsx EAX, WORD PTR [ESI]
 00000559  EB 03			jmp Continue
 0000055B			ByteElement:
 0000055B  0F BE 06			movsx EAX, BYTE PTR [ESI]
 0000055E			Continue:
 0000055E  53				push EBX
 0000055F  BB 00000002			mov EBX, 2
 00000564  E8 00000000 E		call WriteHexB
 00000569  5B				pop EBX
 0000056A  B0 20			mov AL, 32
 0000056C  E8 00000000 E		call WriteChar
 00000571  03 F3			add ESI, EBX
 00000573  E2 D3			loop After
 00000575  E8 00000000 E		call Crlf
 0000057A  5E				pop ESI
 0000057B  59				pop ECX
 0000057C  5B				pop EBX
 0000057D  58				pop EAX
 0000057E  5A				pop EDX
 0000057F  5D				pop EBP
 00000580  C3				ret
 00000581			printArrayGeneral ENDP
					
				END Main
Microsoft (R) Macro Assembler Version 6.15.8803		    12/05/22 15:05:00
C:\Users\jclar\MEGA\School\CS2290\Labs\Assignment 11\Part 1.asm	 Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
INPUT_RECORD . . . . . . . . . .	 00000014
  eventType  . . . . . . . . . .	 00000000	 Word
  event  . . . . . . . . . . . .	 00000004	  00000010
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001AF DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000581 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandtail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000182 Public STDCALL
  Cursor . . . . . . . . . . . .	L Near	 00000082 _TEXT	
  Down . . . . . . . . . . . . .	L Near	 000000B1 _TEXT	
  SetArrowD  . . . . . . . . . .	L Near	 000000C2 _TEXT	
  Up . . . . . . . . . . . . . .	L Near	 000000CF _TEXT	
  SetArrowU  . . . . . . . . . .	L Near	 000000E0 _TEXT	
  GoToProc . . . . . . . . . . .	L Near	 000000ED _TEXT	
  FirstSkip  . . . . . . . . . .	L Near	 0000010A _TEXT	
  SecondSkip . . . . . . . . . .	L Near	 00000127 _TEXT	
  ThirdSkip  . . . . . . . . . .	L Near	 00000144 _TEXT	
  FourthSkip . . . . . . . . . .	L Near	 00000163 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 0000017B _TEXT	
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
addTwoV1 . . . . . . . . . . . .	P Near	 00000182 _TEXT	Length= 0000000B Public STDCALL
addTwoV2 . . . . . . . . . . . .	P Near	 000001E7 _TEXT	Length= 00000014 Public STDCALL
loadArrayGeneral . . . . . . . .	P Near	 000003ED _TEXT	Length= 00000045 Public STDCALL
  WordArray  . . . . . . . . . .	L Near	 000003FB _TEXT	
  DwordArray . . . . . . . . . .	L Near	 00000402 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 00000407 _TEXT	
  Fill . . . . . . . . . . . . .	L Near	 00000413 _TEXT	
  WordEntry  . . . . . . . . . .	L Near	 0000041C _TEXT	
  DwordEntry . . . . . . . . . .	L Near	 00000426 _TEXT	
  Continue . . . . . . . . . . .	L Near	 00000428 _TEXT	
loadArrayRange . . . . . . . . .	P Near	 00000310 _TEXT	Length= 00000029 Public STDCALL
  Fill . . . . . . . . . . . . .	L Near	 0000032C _TEXT	
loadArray  . . . . . . . . . . .	P Near	 0000025A _TEXT	Length= 0000001B Public STDCALL
  Fill . . . . . . . . . . . . .	L Near	 00000269 _TEXT	
printArrayGeneral  . . . . . . .	P Near	 00000432 _TEXT	Length= 0000014F Public STDCALL
  Before . . . . . . . . . . . .	L Near	 000004CF _TEXT	
  WordArray  . . . . . . . . . .	L Near	 00000535 _TEXT	
  DwordArray . . . . . . . . . .	L Near	 0000053C _TEXT	
  Done . . . . . . . . . . . . .	L Near	 00000541 _TEXT	
  After  . . . . . . . . . . . .	L Near	 00000548 _TEXT	
  WordElement  . . . . . . . . .	L Near	 00000551 _TEXT	
  ByteElement  . . . . . . . . .	L Near	 0000055B _TEXT	
  Continue . . . . . . . . . . .	L Near	 0000055E _TEXT	
printArrayRange  . . . . . . . .	P Near	 00000339 _TEXT	Length= 000000B4 Public STDCALL
  Before . . . . . . . . . . . .	L Near	 000003A5 _TEXT	
  After  . . . . . . . . . . . .	L Near	 000003CF _TEXT	
printArray . . . . . . . . . . .	P Near	 00000275 _TEXT	Length= 0000009B Public STDCALL
  Before . . . . . . . . . . . .	L Near	 000002CD _TEXT	
  After  . . . . . . . . . . . .	L Near	 000002F2 _TEXT	
printSumV1 . . . . . . . . . . .	P Near	 0000018D _TEXT	Length= 0000005A Public STDCALL
printSumV2 . . . . . . . . . . .	P Near	 000001FB _TEXT	Length= 0000005F Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LIGHT_BLUE . . . . . . . . . . .	Number	 00000009h   
LIGHT_CYAN . . . . . . . . . . .	Number	 0000000Bh   
LIGHT_GRAY . . . . . . . . . . .	Number	 00000007h   
LIGHT_GREEN  . . . . . . . . . .	Number	 0000000Ah   
LIGHT_MAGENTA  . . . . . . . . .	Number	 0000000Dh   
LIGHT_RED  . . . . . . . . . . .	Number	 0000000Ch   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayLen . . . . . . . . . . . .	Byte	 000000A7 _DATA	
arrayType  . . . . . . . . . . .	Byte	 00000142 _DATA	
arrowPos . . . . . . . . . . . .	Byte	 00000186 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dashes . . . . . . . . . . . . .	Byte	 0000016B _DATA	
eaxValue . . . . . . . . . . . .	Byte	 0000004D _DATA	
endLoc . . . . . . . . . . . . .	Byte	 0000010E _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listAfter  . . . . . . . . . . .	Byte	 000000CE _DATA	
listBefore . . . . . . . . . . .	Byte	 000000C0 _DATA	
list . . . . . . . . . . . . . .	DWord	 00000187 _DATA	
loadedVal  . . . . . . . . . . .	Byte	 0000008E _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
offsetDump . . . . . . . . . . .	Byte	 0000015B _DATA	
program1 . . . . . . . . . . . .	Byte	 00000024 _DATA	
program2 . . . . . . . . . . . .	Byte	 00000058 _DATA	
program3 . . . . . . . . . . . .	Byte	 0000007A _DATA	
program4 . . . . . . . . . . . .	Byte	 000000DC _DATA	
program5 . . . . . . . . . . . .	Byte	 00000127 _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
resultMes  . . . . . . . . . . .	Byte	 0000006B _DATA	
result . . . . . . . . . . . . .	DWord	 00000076 _DATA	
startLoc . . . . . . . . . . . .	Byte	 000000F5 _DATA	
value1 . . . . . . . . . . . . .	Byte	 00000037 _DATA	
value2 . . . . . . . . . . . . .	Byte	 00000042 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
